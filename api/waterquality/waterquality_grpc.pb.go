// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: waterquality/waterquality.proto

package waterquality

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WaterQualityService_Predict_FullMethodName         = "/api.waterquality.WaterQualityService/Predict"
	WaterQualityService_GuessLevel_FullMethodName      = "/api.waterquality.WaterQualityService/GuessLevel"
	WaterQualityService_PredictAndGuess_FullMethodName = "/api.waterquality.WaterQualityService/PredictAndGuess"
)

// WaterQualityServiceClient is the client API for WaterQualityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaterQualityServiceClient interface {
	Predict(ctx context.Context, in *PredictReq, opts ...grpc.CallOption) (*PredictResp, error)
	GuessLevel(ctx context.Context, in *Quality, opts ...grpc.CallOption) (*GuessLevelResp, error)
	PredictAndGuess(ctx context.Context, in *PredictAndGuessReq, opts ...grpc.CallOption) (*PredictAndGuessResp, error)
}

type waterQualityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWaterQualityServiceClient(cc grpc.ClientConnInterface) WaterQualityServiceClient {
	return &waterQualityServiceClient{cc}
}

func (c *waterQualityServiceClient) Predict(ctx context.Context, in *PredictReq, opts ...grpc.CallOption) (*PredictResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictResp)
	err := c.cc.Invoke(ctx, WaterQualityService_Predict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) GuessLevel(ctx context.Context, in *Quality, opts ...grpc.CallOption) (*GuessLevelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuessLevelResp)
	err := c.cc.Invoke(ctx, WaterQualityService_GuessLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterQualityServiceClient) PredictAndGuess(ctx context.Context, in *PredictAndGuessReq, opts ...grpc.CallOption) (*PredictAndGuessResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictAndGuessResp)
	err := c.cc.Invoke(ctx, WaterQualityService_PredictAndGuess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaterQualityServiceServer is the server API for WaterQualityService service.
// All implementations must embed UnimplementedWaterQualityServiceServer
// for forward compatibility
type WaterQualityServiceServer interface {
	Predict(context.Context, *PredictReq) (*PredictResp, error)
	GuessLevel(context.Context, *Quality) (*GuessLevelResp, error)
	PredictAndGuess(context.Context, *PredictAndGuessReq) (*PredictAndGuessResp, error)
	mustEmbedUnimplementedWaterQualityServiceServer()
}

// UnimplementedWaterQualityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWaterQualityServiceServer struct {
}

func (UnimplementedWaterQualityServiceServer) Predict(context.Context, *PredictReq) (*PredictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedWaterQualityServiceServer) GuessLevel(context.Context, *Quality) (*GuessLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessLevel not implemented")
}
func (UnimplementedWaterQualityServiceServer) PredictAndGuess(context.Context, *PredictAndGuessReq) (*PredictAndGuessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictAndGuess not implemented")
}
func (UnimplementedWaterQualityServiceServer) mustEmbedUnimplementedWaterQualityServiceServer() {}

// UnsafeWaterQualityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaterQualityServiceServer will
// result in compilation errors.
type UnsafeWaterQualityServiceServer interface {
	mustEmbedUnimplementedWaterQualityServiceServer()
}

func RegisterWaterQualityServiceServer(s grpc.ServiceRegistrar, srv WaterQualityServiceServer) {
	s.RegisterService(&WaterQualityService_ServiceDesc, srv)
}

func _WaterQualityService_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_Predict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).Predict(ctx, req.(*PredictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_GuessLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Quality)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).GuessLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_GuessLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).GuessLevel(ctx, req.(*Quality))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterQualityService_PredictAndGuess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictAndGuessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterQualityServiceServer).PredictAndGuess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterQualityService_PredictAndGuess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterQualityServiceServer).PredictAndGuess(ctx, req.(*PredictAndGuessReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WaterQualityService_ServiceDesc is the grpc.ServiceDesc for WaterQualityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaterQualityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.waterquality.WaterQualityService",
	HandlerType: (*WaterQualityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _WaterQualityService_Predict_Handler,
		},
		{
			MethodName: "GuessLevel",
			Handler:    _WaterQualityService_GuessLevel_Handler,
		},
		{
			MethodName: "PredictAndGuess",
			Handler:    _WaterQualityService_PredictAndGuess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "waterquality/waterquality.proto",
}
