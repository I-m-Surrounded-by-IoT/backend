// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v5.27.0
// source: log/log.proto

package log

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLogCreateDeviceLog = "/api.log.Log/CreateDeviceLog"
const OperationLogListDeviceLog = "/api.log.Log/ListDeviceLog"

type LogHTTPServer interface {
	CreateDeviceLog(context.Context, *DeviceLog) (*Empty, error)
	ListDeviceLog(context.Context, *ListDeviceLogReq) (*ListDeviceLogResp, error)
}

func RegisterLogHTTPServer(s *http.Server, srv LogHTTPServer) {
	r := s.Route("/")
	r.POST("/log/device", _Log_CreateDeviceLog0_HTTP_Handler(srv))
	r.GET("/log/device", _Log_ListDeviceLog0_HTTP_Handler(srv))
}

func _Log_CreateDeviceLog0_HTTP_Handler(srv LogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeviceLog
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogCreateDeviceLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDeviceLog(ctx, req.(*DeviceLog))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Log_ListDeviceLog0_HTTP_Handler(srv LogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeviceLogReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogListDeviceLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDeviceLog(ctx, req.(*ListDeviceLogReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeviceLogResp)
		return ctx.Result(200, reply)
	}
}

type LogHTTPClient interface {
	CreateDeviceLog(ctx context.Context, req *DeviceLog, opts ...http.CallOption) (rsp *Empty, err error)
	ListDeviceLog(ctx context.Context, req *ListDeviceLogReq, opts ...http.CallOption) (rsp *ListDeviceLogResp, err error)
}

type LogHTTPClientImpl struct {
	cc *http.Client
}

func NewLogHTTPClient(client *http.Client) LogHTTPClient {
	return &LogHTTPClientImpl{client}
}

func (c *LogHTTPClientImpl) CreateDeviceLog(ctx context.Context, in *DeviceLog, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/log/device"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLogCreateDeviceLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LogHTTPClientImpl) ListDeviceLog(ctx context.Context, in *ListDeviceLogReq, opts ...http.CallOption) (*ListDeviceLogResp, error) {
	var out ListDeviceLogResp
	pattern := "/log/device"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLogListDeviceLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
