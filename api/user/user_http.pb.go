// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v5.27.3
// source: user/user.proto

package user

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserBindEmail = "/api.user.User/BindEmail"
const OperationUserCreateUser = "/api.user.User/CreateUser"
const OperationUserFollowAllDevice = "/api.user.User/FollowAllDevice"
const OperationUserFollowDevice = "/api.user.User/FollowDevice"
const OperationUserGetUserId = "/api.user.User/GetUserId"
const OperationUserGetUserInfo = "/api.user.User/GetUserInfo"
const OperationUserGetUserInfoByUsername = "/api.user.User/GetUserInfoByUsername"
const OperationUserGetUserLastSeen = "/api.user.User/GetUserLastSeen"
const OperationUserGetUserPasswordVersion = "/api.user.User/GetUserPasswordVersion"
const OperationUserHasFollowedDevice = "/api.user.User/HasFollowedDevice"
const OperationUserListFollowedDeviceIDs = "/api.user.User/ListFollowedDeviceIDs"
const OperationUserListFollowedUserIDsByDevice = "/api.user.User/ListFollowedUserIDsByDevice"
const OperationUserListFollowedUserNotificationMethodsByDevice = "/api.user.User/ListFollowedUserNotificationMethodsByDevice"
const OperationUserListUser = "/api.user.User/ListUser"
const OperationUserSetUserPassword = "/api.user.User/SetUserPassword"
const OperationUserSetUserRole = "/api.user.User/SetUserRole"
const OperationUserSetUserStatus = "/api.user.User/SetUserStatus"
const OperationUserSetUsername = "/api.user.User/SetUsername"
const OperationUserUnbindEmail = "/api.user.User/UnbindEmail"
const OperationUserUnfollowAllDevice = "/api.user.User/UnfollowAllDevice"
const OperationUserUnfollowDevice = "/api.user.User/UnfollowDevice"
const OperationUserUpdateUserLastSeen = "/api.user.User/UpdateUserLastSeen"
const OperationUserValidateUserPassword = "/api.user.User/ValidateUserPassword"

type UserHTTPServer interface {
	BindEmail(context.Context, *BindEmailReq) (*Empty, error)
	CreateUser(context.Context, *CreateUserReq) (*UserInfo, error)
	FollowAllDevice(context.Context, *FollowAllDeviceReq) (*Empty, error)
	FollowDevice(context.Context, *FollowDeviceReq) (*Empty, error)
	GetUserId(context.Context, *GetUserIdReq) (*GetUserIdResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*UserInfo, error)
	GetUserInfoByUsername(context.Context, *GetUserInfoByUsernameReq) (*UserInfo, error)
	GetUserLastSeen(context.Context, *GetUserLastSeenReq) (*UserLastSeen, error)
	GetUserPasswordVersion(context.Context, *GetUserPasswordVersionReq) (*GetUserPasswordVersionResp, error)
	HasFollowedDevice(context.Context, *HasFollowedDeviceReq) (*HasFollowedDeviceResp, error)
	ListFollowedDeviceIDs(context.Context, *ListFollowedDeviceIDsReq) (*ListFollowedDeviceIDsResp, error)
	ListFollowedUserIDsByDevice(context.Context, *ListFollowedUserIDsByDeviceReq) (*ListFollowedUserIDsByDeviceResp, error)
	ListFollowedUserNotificationMethodsByDevice(context.Context, *ListFollowedUserNotificationMethodsByDeviceReq) (*ListFollowedUserNotificationMethodsByDeviceResp, error)
	ListUser(context.Context, *ListUserReq) (*ListUserResp, error)
	SetUserPassword(context.Context, *SetUserPasswordReq) (*Empty, error)
	SetUserRole(context.Context, *SetUserRoleReq) (*Empty, error)
	SetUserStatus(context.Context, *SetUserStatusReq) (*Empty, error)
	SetUsername(context.Context, *SetUsernameReq) (*SetUsernameResp, error)
	UnbindEmail(context.Context, *UnbindEmailReq) (*Empty, error)
	UnfollowAllDevice(context.Context, *UnfollowAllDeviceReq) (*Empty, error)
	UnfollowDevice(context.Context, *UnfollowDeviceReq) (*Empty, error)
	UpdateUserLastSeen(context.Context, *UpdateUserLastSeenReq) (*Empty, error)
	ValidateUserPassword(context.Context, *ValidateUserPasswordReq) (*ValidateUserPasswordResp, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/user", _User_CreateUser0_HTTP_Handler(srv))
	r.GET("/user/{id}", _User_GetUserInfo0_HTTP_Handler(srv))
	r.GET("/user/username/{username}", _User_GetUserInfoByUsername0_HTTP_Handler(srv))
	r.GET("/user/username/{username}/id", _User_GetUserId0_HTTP_Handler(srv))
	r.POST("/user/validate", _User_ValidateUserPassword0_HTTP_Handler(srv))
	r.GET("/user/password/version/{id}", _User_GetUserPasswordVersion0_HTTP_Handler(srv))
	r.PUT("/user/password", _User_SetUserPassword0_HTTP_Handler(srv))
	r.PUT("/user/role", _User_SetUserRole0_HTTP_Handler(srv))
	r.PUT("/user/status", _User_SetUserStatus0_HTTP_Handler(srv))
	r.PUT("/user/username", _User_SetUsername0_HTTP_Handler(srv))
	r.GET("/user", _User_ListUser0_HTTP_Handler(srv))
	r.PUT("/user/last-seen", _User_UpdateUserLastSeen0_HTTP_Handler(srv))
	r.GET("/user/last-seen/{id}", _User_GetUserLastSeen0_HTTP_Handler(srv))
	r.POST("/user/follow/device", _User_FollowDevice0_HTTP_Handler(srv))
	r.POST("/user/unfollow/device", _User_UnfollowDevice0_HTTP_Handler(srv))
	r.GET("/user/follow/device/{user_id}", _User_ListFollowedDeviceIDs0_HTTP_Handler(srv))
	r.GET("/user/follow/user/{device_id}", _User_ListFollowedUserIDsByDevice0_HTTP_Handler(srv))
	r.GET("/user/follow/user/email/{device_id}", _User_ListFollowedUserNotificationMethodsByDevice0_HTTP_Handler(srv))
	r.GET("/user/follow/device/{user_id}/{device_id}", _User_HasFollowedDevice0_HTTP_Handler(srv))
	r.POST("/user/follow/device/all", _User_FollowAllDevice0_HTTP_Handler(srv))
	r.POST("/user/unfollow/device/all", _User_UnfollowAllDevice0_HTTP_Handler(srv))
	r.POST("/user/email", _User_BindEmail0_HTTP_Handler(srv))
	r.POST("/user/email/unbind", _User_UnbindEmail0_HTTP_Handler(srv))
}

func _User_CreateUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfo)
		return ctx.Result(200, reply)
	}
}

func _User_GetUserInfo0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*GetUserInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfo)
		return ctx.Result(200, reply)
	}
}

func _User_GetUserInfoByUsername0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserInfoByUsernameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUserInfoByUsername)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfoByUsername(ctx, req.(*GetUserInfoByUsernameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfo)
		return ctx.Result(200, reply)
	}
}

func _User_GetUserId0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUserId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserId(ctx, req.(*GetUserIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserIdResp)
		return ctx.Result(200, reply)
	}
}

func _User_ValidateUserPassword0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ValidateUserPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserValidateUserPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ValidateUserPassword(ctx, req.(*ValidateUserPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ValidateUserPasswordResp)
		return ctx.Result(200, reply)
	}
}

func _User_GetUserPasswordVersion0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserPasswordVersionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUserPasswordVersion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserPasswordVersion(ctx, req.(*GetUserPasswordVersionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserPasswordVersionResp)
		return ctx.Result(200, reply)
	}
}

func _User_SetUserPassword0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetUserPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserPassword(ctx, req.(*SetUserPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _User_SetUserRole0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetUserRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserRole(ctx, req.(*SetUserRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _User_SetUserStatus0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserStatusReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetUserStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserStatus(ctx, req.(*SetUserStatusReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _User_SetUsername0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUsernameReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetUsername)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUsername(ctx, req.(*SetUsernameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetUsernameResp)
		return ctx.Result(200, reply)
	}
}

func _User_ListUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserResp)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateUserLastSeen0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserLastSeenReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateUserLastSeen)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserLastSeen(ctx, req.(*UpdateUserLastSeenReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _User_GetUserLastSeen0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserLastSeenReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUserLastSeen)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserLastSeen(ctx, req.(*GetUserLastSeenReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserLastSeen)
		return ctx.Result(200, reply)
	}
}

func _User_FollowDevice0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserFollowDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowDevice(ctx, req.(*FollowDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _User_UnfollowDevice0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnfollowDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUnfollowDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfollowDevice(ctx, req.(*UnfollowDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _User_ListFollowedDeviceIDs0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFollowedDeviceIDsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListFollowedDeviceIDs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFollowedDeviceIDs(ctx, req.(*ListFollowedDeviceIDsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFollowedDeviceIDsResp)
		return ctx.Result(200, reply)
	}
}

func _User_ListFollowedUserIDsByDevice0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFollowedUserIDsByDeviceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListFollowedUserIDsByDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFollowedUserIDsByDevice(ctx, req.(*ListFollowedUserIDsByDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFollowedUserIDsByDeviceResp)
		return ctx.Result(200, reply)
	}
}

func _User_ListFollowedUserNotificationMethodsByDevice0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFollowedUserNotificationMethodsByDeviceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListFollowedUserNotificationMethodsByDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFollowedUserNotificationMethodsByDevice(ctx, req.(*ListFollowedUserNotificationMethodsByDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFollowedUserNotificationMethodsByDeviceResp)
		return ctx.Result(200, reply)
	}
}

func _User_HasFollowedDevice0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HasFollowedDeviceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserHasFollowedDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HasFollowedDevice(ctx, req.(*HasFollowedDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HasFollowedDeviceResp)
		return ctx.Result(200, reply)
	}
}

func _User_FollowAllDevice0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowAllDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserFollowAllDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowAllDevice(ctx, req.(*FollowAllDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _User_UnfollowAllDevice0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnfollowAllDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUnfollowAllDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfollowAllDevice(ctx, req.(*UnfollowAllDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _User_BindEmail0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BindEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserBindEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BindEmail(ctx, req.(*BindEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _User_UnbindEmail0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnbindEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUnbindEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnbindEmail(ctx, req.(*UnbindEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	BindEmail(ctx context.Context, req *BindEmailReq, opts ...http.CallOption) (rsp *Empty, err error)
	CreateUser(ctx context.Context, req *CreateUserReq, opts ...http.CallOption) (rsp *UserInfo, err error)
	FollowAllDevice(ctx context.Context, req *FollowAllDeviceReq, opts ...http.CallOption) (rsp *Empty, err error)
	FollowDevice(ctx context.Context, req *FollowDeviceReq, opts ...http.CallOption) (rsp *Empty, err error)
	GetUserId(ctx context.Context, req *GetUserIdReq, opts ...http.CallOption) (rsp *GetUserIdResp, err error)
	GetUserInfo(ctx context.Context, req *GetUserInfoReq, opts ...http.CallOption) (rsp *UserInfo, err error)
	GetUserInfoByUsername(ctx context.Context, req *GetUserInfoByUsernameReq, opts ...http.CallOption) (rsp *UserInfo, err error)
	GetUserLastSeen(ctx context.Context, req *GetUserLastSeenReq, opts ...http.CallOption) (rsp *UserLastSeen, err error)
	GetUserPasswordVersion(ctx context.Context, req *GetUserPasswordVersionReq, opts ...http.CallOption) (rsp *GetUserPasswordVersionResp, err error)
	HasFollowedDevice(ctx context.Context, req *HasFollowedDeviceReq, opts ...http.CallOption) (rsp *HasFollowedDeviceResp, err error)
	ListFollowedDeviceIDs(ctx context.Context, req *ListFollowedDeviceIDsReq, opts ...http.CallOption) (rsp *ListFollowedDeviceIDsResp, err error)
	ListFollowedUserIDsByDevice(ctx context.Context, req *ListFollowedUserIDsByDeviceReq, opts ...http.CallOption) (rsp *ListFollowedUserIDsByDeviceResp, err error)
	ListFollowedUserNotificationMethodsByDevice(ctx context.Context, req *ListFollowedUserNotificationMethodsByDeviceReq, opts ...http.CallOption) (rsp *ListFollowedUserNotificationMethodsByDeviceResp, err error)
	ListUser(ctx context.Context, req *ListUserReq, opts ...http.CallOption) (rsp *ListUserResp, err error)
	SetUserPassword(ctx context.Context, req *SetUserPasswordReq, opts ...http.CallOption) (rsp *Empty, err error)
	SetUserRole(ctx context.Context, req *SetUserRoleReq, opts ...http.CallOption) (rsp *Empty, err error)
	SetUserStatus(ctx context.Context, req *SetUserStatusReq, opts ...http.CallOption) (rsp *Empty, err error)
	SetUsername(ctx context.Context, req *SetUsernameReq, opts ...http.CallOption) (rsp *SetUsernameResp, err error)
	UnbindEmail(ctx context.Context, req *UnbindEmailReq, opts ...http.CallOption) (rsp *Empty, err error)
	UnfollowAllDevice(ctx context.Context, req *UnfollowAllDeviceReq, opts ...http.CallOption) (rsp *Empty, err error)
	UnfollowDevice(ctx context.Context, req *UnfollowDeviceReq, opts ...http.CallOption) (rsp *Empty, err error)
	UpdateUserLastSeen(ctx context.Context, req *UpdateUserLastSeenReq, opts ...http.CallOption) (rsp *Empty, err error)
	ValidateUserPassword(ctx context.Context, req *ValidateUserPasswordReq, opts ...http.CallOption) (rsp *ValidateUserPasswordResp, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) BindEmail(ctx context.Context, in *BindEmailReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserBindEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserReq, opts ...http.CallOption) (*UserInfo, error) {
	var out UserInfo
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) FollowAllDevice(ctx context.Context, in *FollowAllDeviceReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/follow/device/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserFollowAllDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) FollowDevice(ctx context.Context, in *FollowDeviceReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/follow/device"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserFollowDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUserId(ctx context.Context, in *GetUserIdReq, opts ...http.CallOption) (*GetUserIdResp, error) {
	var out GetUserIdResp
	pattern := "/user/username/{username}/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUserId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...http.CallOption) (*UserInfo, error) {
	var out UserInfo
	pattern := "/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUserInfoByUsername(ctx context.Context, in *GetUserInfoByUsernameReq, opts ...http.CallOption) (*UserInfo, error) {
	var out UserInfo
	pattern := "/user/username/{username}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUserInfoByUsername))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUserLastSeen(ctx context.Context, in *GetUserLastSeenReq, opts ...http.CallOption) (*UserLastSeen, error) {
	var out UserLastSeen
	pattern := "/user/last-seen/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUserLastSeen))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUserPasswordVersion(ctx context.Context, in *GetUserPasswordVersionReq, opts ...http.CallOption) (*GetUserPasswordVersionResp, error) {
	var out GetUserPasswordVersionResp
	pattern := "/user/password/version/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUserPasswordVersion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) HasFollowedDevice(ctx context.Context, in *HasFollowedDeviceReq, opts ...http.CallOption) (*HasFollowedDeviceResp, error) {
	var out HasFollowedDeviceResp
	pattern := "/user/follow/device/{user_id}/{device_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserHasFollowedDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ListFollowedDeviceIDs(ctx context.Context, in *ListFollowedDeviceIDsReq, opts ...http.CallOption) (*ListFollowedDeviceIDsResp, error) {
	var out ListFollowedDeviceIDsResp
	pattern := "/user/follow/device/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserListFollowedDeviceIDs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ListFollowedUserIDsByDevice(ctx context.Context, in *ListFollowedUserIDsByDeviceReq, opts ...http.CallOption) (*ListFollowedUserIDsByDeviceResp, error) {
	var out ListFollowedUserIDsByDeviceResp
	pattern := "/user/follow/user/{device_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserListFollowedUserIDsByDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ListFollowedUserNotificationMethodsByDevice(ctx context.Context, in *ListFollowedUserNotificationMethodsByDeviceReq, opts ...http.CallOption) (*ListFollowedUserNotificationMethodsByDeviceResp, error) {
	var out ListFollowedUserNotificationMethodsByDeviceResp
	pattern := "/user/follow/user/email/{device_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserListFollowedUserNotificationMethodsByDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ListUser(ctx context.Context, in *ListUserReq, opts ...http.CallOption) (*ListUserResp, error) {
	var out ListUserResp
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetUserPassword(ctx context.Context, in *SetUserPasswordReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetUserPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetUserRole(ctx context.Context, in *SetUserRoleReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetUserRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetUserStatus(ctx context.Context, in *SetUserStatusReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetUserStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetUsername(ctx context.Context, in *SetUsernameReq, opts ...http.CallOption) (*SetUsernameResp, error) {
	var out SetUsernameResp
	pattern := "/user/username"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetUsername))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UnbindEmail(ctx context.Context, in *UnbindEmailReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/email/unbind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUnbindEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UnfollowAllDevice(ctx context.Context, in *UnfollowAllDeviceReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/unfollow/device/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUnfollowAllDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UnfollowDevice(ctx context.Context, in *UnfollowDeviceReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/unfollow/device"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUnfollowDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateUserLastSeen(ctx context.Context, in *UpdateUserLastSeenReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/last-seen"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateUserLastSeen))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ValidateUserPassword(ctx context.Context, in *ValidateUserPasswordReq, opts ...http.CallOption) (*ValidateUserPasswordResp, error) {
	var out ValidateUserPasswordResp
	pattern := "/user/validate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserValidateUserPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
