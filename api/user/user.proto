syntax = "proto3";

package api.user;

option go_package = "github.com/I-m-Surrounded-by-IoT/backend/api/user;user";

import "google/api/annotations.proto";

service User {
  rpc CreateUser(CreateUserReq) returns (UserInfo) {
    option (google.api.http) = {
      post : "/user"
      body : "*"
    };
  }

  rpc GetUserInfo(GetUserInfoReq) returns (UserInfo) {
    option (google.api.http) = {
      get : "/user/{id}"
    };
  }

  rpc GetUserInfoByUsername(GetUserInfoByUsernameReq) returns (UserInfo) {
    option (google.api.http) = {
      get : "/user/username/{username}"
    };
  }

  rpc GetUserId(GetUserIdReq) returns (GetUserIdResp) {
    option (google.api.http) = {
      get : "/user/username/{username}/id"
    };
  }

  rpc ValidateUserPassword(ValidateUserPasswordReq)
      returns (ValidateUserPasswordResp) {
    option (google.api.http) = {
      post : "/user/validate"
      body : "*"
    };
  }

  rpc GetUserPasswordVersion(GetUserPasswordVersionReq)
      returns (GetUserPasswordVersionResp) {
    option (google.api.http) = {
      get : "/user/password/version/{id}"
    };
  }

  rpc SetUserPassword(SetUserPasswordReq) returns (Empty) {
    option (google.api.http) = {
      put : "/user/password"
      body : "*"
    };
  }

  rpc SetUserRole(SetUserRoleReq) returns (Empty) {
    option (google.api.http) = {
      put : "/user/role"
      body : "*"
    };
  }

  rpc SetUserStatus(SetUserStatusReq) returns (Empty) {
    option (google.api.http) = {
      put : "/user/status"
      body : "*"
    };
  }

  rpc SetUsername(SetUsernameReq) returns (SetUsernameResp) {
    option (google.api.http) = {
      put : "/user/username"
      body : "*"
    };
  }

  rpc ListUser(ListUserReq) returns (ListUserResp) {
    option (google.api.http) = {
      get : "/user"
    };
  }

  rpc UpdateUserLastSeen(UpdateUserLastSeenReq) returns (Empty) {
    option (google.api.http) = {
      put : "/user/last-seen"
      body : "*"
    };
  }

  rpc GetUserLastSeen(GetUserLastSeenReq) returns (UserLastSeen) {
    option (google.api.http) = {
      get : "/user/last-seen/{id}"
    };
  }

  rpc FollowDevice(FollowDeviceReq) returns (Empty) {
    option (google.api.http) = {
      post : "/user/follow/device"
      body : "*"
    };
  }

  rpc UnfollowDevice(UnfollowDeviceReq) returns (Empty) {
    option (google.api.http) = {
      post : "/user/unfollow/device"
      body : "*"
    };
  }

  rpc ListFollowedDeviceIDs(ListFollowedDeviceIDsReq)
      returns (ListFollowedDeviceIDsResp) {
    option (google.api.http) = {
      get : "/user/follow/device/{user_id}"
    };
  }

  rpc ListFollowedUserIDsByDevice(ListFollowedUserIDsByDeviceReq)
      returns (ListFollowedUserIDsByDeviceResp) {
    option (google.api.http) = {
      get : "/user/follow/user/{device_id}"
    };
  }

  rpc ListFollowedUserEmailsByDevice(ListFollowedUserEmailsByDeviceReq)
      returns (ListFollowedUserEmailsByDeviceResp) {
    option (google.api.http) = {
      get : "/user/follow/user/email/{device_id}"
    };
  }

  rpc HasFollowedDevice(HasFollowedDeviceReq) returns (HasFollowedDeviceResp) {
    option (google.api.http) = {
      get : "/user/follow/device/{user_id}/{device_id}"
    };
  }

  rpc FollowAllDevice(FollowAllDeviceReq) returns (Empty) {
    option (google.api.http) = {
      post : "/user/follow/device/all"
      body : "*"
    };
  }

  rpc UnfollowAllDevice(UnfollowAllDeviceReq) returns (Empty) {
    option (google.api.http) = {
      post : "/user/unfollow/device/all"
      body : "*"
    };
  }

  rpc BindEmail(BindEmailReq) returns (Empty) {
    option (google.api.http) = {
      post : "/user/email"
      body : "*"
    };
  }

  rpc UnbindEmail(UnbindEmailReq) returns (Empty) {
    option (google.api.http) = {
      post : "/user/email/unbind"
      body : "*"
    };
  }
}

message Empty {}

enum Role {
  USER = 0;
  ADMIN = 1;
}

enum Status {
  ACTIVE = 0;
  INACTIVE = 1;
}

message CreateUserReq {
  string username = 1;
  string password = 2;
  Role role = 3;
  Status status = 4;
}

message GetUserInfoReq {
  string id = 1;
  repeated string fields = 2;
}

message GetUserInfoByUsernameReq {
  string username = 1;
  repeated string fields = 2;
}

message UserInfo {
  string id = 1;        // @gotags: redis:"id"
  int64 created_at = 2; // @gotags: redis:"createdAt" json:"createdAt"
  int64 updated_at = 3; // @gotags: redis:"-" json:"-"`
  string username = 4;  // @gotags: redis:"username"
  Role role = 5;        // @gotags: redis:"role,omitempty" json:"role"
  Status status = 6;    // @gotags: redis:"status,omitempty" json:"status"
}

message GetUserIdReq { string username = 1; }

message GetUserIdResp { string id = 1; }

message ValidateUserPasswordReq {
  string id = 1;
  string password = 2;
}

message ValidateUserPasswordResp { bool valid = 1; }

message GetUserPasswordVersionReq { string id = 1; }

message GetUserPasswordVersionResp { uint32 version = 1; }

message SetUserPasswordReq {
  string id = 1;
  string password = 2;
}

message SetUserRoleReq {
  string id = 1; // @gotags: json:"id" binding:"required"
  Role role = 2; // @gotags: json:"role" binding:"required"
}

message SetUserStatusReq {
  string id = 1;     // @gotags: json:"id" binding:"required"
  Status status = 2; // @gotags: json:"status" binding:"required"
}

message SetUsernameReq {
  string id = 1;       // @gotags: json:"id" binding:"required"
  string username = 2; // @gotags: json:"username" binding:"required"
}

message SetUsernameResp {
  string old_username = 1; // @gotags: json:"oldUsername"
}

enum ListUserOrder {
  NAME = 0;
  ROLE = 1;
  STATUS = 2;
  CREATED_AT = 3;
  UPDATED_AT = 4;
}

enum Sort {
  DESC = 0;
  ASC = 1;
}

message ListUserReq {
  int32 page = 1;             // @gotags: form:"page"
  int32 size = 2;             // @gotags: form:"size"
  ListUserOrder order = 3;    // @gotags: form:"order"
  Sort sort = 4;              // @gotags: form:"sort"
  repeated string fields = 5; // @gotags: form:"fields"
  string id = 6;              // @gotags: form:"id"
  string username = 7;        // @gotags: form:"username"
  string role = 8;            // @gotags: form:"role"
  string status = 9;          // @gotags: form:"status"
}

message ListUserResp {
  repeated UserInfo users = 1;
  int32 total = 4;
}

message UserLastSeen {
  int64 last_seen_at = 1; // @gotags: redis:"lastSeenAt" json:"lastSeenAt"
  string last_seen_ip =
      2; // @gotags: redis:"lastSeenIp,omitempty" json:"lastSeenIP"
}

message UpdateUserLastSeenReq {
  string id = 1;
  UserLastSeen last_seen = 2;
}

message GetUserLastSeenReq { string id = 1; }

message FollowDeviceReq {
  string user_id = 1;
  uint64 device_id = 2;
}

message UnfollowDeviceReq {
  string user_id = 1;
  uint64 device_id = 2;
}

message ListFollowedDeviceIDsReq { string user_id = 1; }

message ListFollowedDeviceIDsResp { repeated uint64 device_ids = 1; }

message ListFollowedUserIDsByDeviceReq { uint64 device_id = 1; }

message ListFollowedUserIDsByDeviceResp { repeated string user_ids = 1; }

message ListFollowedUserEmailsByDeviceReq { uint64 device_id = 1; }

message ListFollowedUserEmailsByDeviceResp { repeated string user_emails = 1; }

message HasFollowedDeviceReq {
  string user_id = 1;
  uint64 device_id = 2;
}

message HasFollowedDeviceResp { bool followed = 1; }

message FollowAllDeviceReq { string user_id = 1; }

message UnfollowAllDeviceReq { string user_id = 1; }

message BindEmailReq {
  string id = 1;    // @gotags: json:"id" binding:"required"
  string email = 2; // @gotags: json:"email" binding:"required"
}

message UnbindEmailReq {
  string id = 1; // @gotags: json:"id" binding:"required"
}