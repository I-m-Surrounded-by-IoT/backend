syntax = "proto3";

package api.user;

option go_package = "github.com/I-m-Surrounded-by-IoT/backend/api/user;user";

import "google/api/annotations.proto";

service User {
  rpc CreateUser(CreateUserReq) returns (UserInfo) {
    option (google.api.http) = {
      post : "/user"
      body : "*"
    };
  }

  rpc GetUserInfo(GetUserInfoReq) returns (UserInfo) {
    option (google.api.http) = {
      get : "/user/{id}"
    };
  }

  rpc GetUserInfoByName(GetUserInfoByNameReq) returns (UserInfo) {
    option (google.api.http) = {
      get : "/user/name/{name}"
    };
  }

  rpc GetUserId(GetUserIdReq) returns (GetUserIdResp) {
    option (google.api.http) = {
      get : "/user/name/{name}/id"
    };
  }

  rpc ValidateUserPassword(ValidateUserPasswordReq)
      returns (ValidateUserPasswordResp) {
    option (google.api.http) = {
      post : "/user/validate"
      body : "*"
    };
  }

  rpc GetUserPasswordVersion(GetUserPasswordVersionReq)
      returns (GetUserPasswordVersionResp) {
    option (google.api.http) = {
      get : "/user/password/version/{id}"
    };
  }

  rpc SetUserPassword(SetUserPasswordReq) returns (Empty) {
    option (google.api.http) = {
      put : "/user/password"
      body : "*"
    };
  }

  rpc SetUserRole(SetUserRoleReq) returns (Empty) {
    option (google.api.http) = {
      put : "/user/role"
      body : "*"
    };
  }

  rpc SetUserStatus(SetUserStatusReq) returns (Empty) {
    option (google.api.http) = {
      put : "/user/status"
      body : "*"
    };
  }

  rpc SetUserName(SetUserNameReq) returns (SetUserNameResp) {
    option (google.api.http) = {
      put : "/user/name"
      body : "*"
    };
  }

  rpc ListUser(ListUserReq) returns (ListUserResp) {
    option (google.api.http) = {
      get : "/user"
    };
  }
}

message Empty {}

enum Role {
  USER = 0;
  ADMIN = 1;
}

enum Status {
  ACTIVE = 0;
  INACTIVE = 1;
}

message CreateUserReq {
  string name = 1;
  string password = 2;
  Role role = 3;
  Status status = 4;
}

message GetUserInfoReq {
  string id = 1;
  repeated string fields = 2;
}

message GetUserInfoByNameReq {
  string name = 1;
  repeated string fields = 2;
}

message UserInfo {
  string id = 1;        // @gotags: redis:"id"
  int64 created_at = 2; // @gotags: redis:"created_at"
  int64 updated_at = 3; // @gotags: redis:"-" json:"-"`
  string name = 4;      // @gotags: redis:"name"
  Role role = 5;        // @gotags: redis:"role,omitempty" json:"role"
  Status status = 6;    // @gotags: redis:"status,omitempty" json:"status"
}

message GetUserIdReq { string name = 1; }

message GetUserIdResp { string id = 1; }

message ValidateUserPasswordReq {
  string id = 1;
  string password = 2;
}

message ValidateUserPasswordResp { bool valid = 1; }

message GetUserPasswordVersionReq { string id = 1; }

message GetUserPasswordVersionResp { uint32 version = 1; }

message SetUserPasswordReq {
  string id = 1;
  string password = 2;
}

message SetUserRoleReq {
  string id = 1;
  Role role = 2;
}

message SetUserStatusReq {
  string id = 1;
  Status status = 2;
}

message SetUserNameReq {
  string id = 1;
  string name = 2;
}

message SetUserNameResp { string name = 1; }

enum ListUserOrder {
  NAME = 0;
  ROLE = 1;
  STATUS = 2;
  CREATED_AT = 3;
  UPDATED_AT = 4;
}

enum Sort {
  DESC = 0;
  ASC = 1;
}

message ListUserReq {
  int32 page = 1;             // @gotags: form:"page"
  int32 size = 2;             // @gotags: form:"size"
  ListUserOrder order = 3;    // @gotags: form:"order"
  Sort sort = 4;              // @gotags: form:"sort"
  repeated string fields = 5; // @gotags: form:"fields"
  string id = 6;              // @gotags: form:"id"
  string name = 7;            // @gotags: form:"name"
  string role = 8;            // @gotags: form:"role"
  string status = 9;          // @gotags: form:"status"
}

message ListUserResp {
  repeated UserInfo users = 1;
  int32 total = 4;
}