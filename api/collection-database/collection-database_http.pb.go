// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.3
// source: collection-database/collection-database.proto

package collection_database

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCollectionDatabaseCreateCollectionRecord = "/api.collection_database.CollectionDatabase/CreateCollectionRecord"
const OperationCollectionDatabaseListCollectionRecord = "/api.collection_database.CollectionDatabase/ListCollectionRecord"

type CollectionDatabaseHTTPServer interface {
	CreateCollectionRecord(context.Context, *CollectionRecord) (*Empty, error)
	ListCollectionRecord(context.Context, *ListCollectionRecordReq) (*ListCollectionRecordResp, error)
}

func RegisterCollectionDatabaseHTTPServer(s *http.Server, srv CollectionDatabaseHTTPServer) {
	r := s.Route("/")
	r.POST("/collection", _CollectionDatabase_CreateCollectionRecord0_HTTP_Handler(srv))
	r.GET("/collection", _CollectionDatabase_ListCollectionRecord0_HTTP_Handler(srv))
}

func _CollectionDatabase_CreateCollectionRecord0_HTTP_Handler(srv CollectionDatabaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CollectionRecord
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionDatabaseCreateCollectionRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCollectionRecord(ctx, req.(*CollectionRecord))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _CollectionDatabase_ListCollectionRecord0_HTTP_Handler(srv CollectionDatabaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCollectionRecordReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionDatabaseListCollectionRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCollectionRecord(ctx, req.(*ListCollectionRecordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCollectionRecordResp)
		return ctx.Result(200, reply)
	}
}

type CollectionDatabaseHTTPClient interface {
	CreateCollectionRecord(ctx context.Context, req *CollectionRecord, opts ...http.CallOption) (rsp *Empty, err error)
	ListCollectionRecord(ctx context.Context, req *ListCollectionRecordReq, opts ...http.CallOption) (rsp *ListCollectionRecordResp, err error)
}

type CollectionDatabaseHTTPClientImpl struct {
	cc *http.Client
}

func NewCollectionDatabaseHTTPClient(client *http.Client) CollectionDatabaseHTTPClient {
	return &CollectionDatabaseHTTPClientImpl{client}
}

func (c *CollectionDatabaseHTTPClientImpl) CreateCollectionRecord(ctx context.Context, in *CollectionRecord, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/collection"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCollectionDatabaseCreateCollectionRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CollectionDatabaseHTTPClientImpl) ListCollectionRecord(ctx context.Context, in *ListCollectionRecordReq, opts ...http.CallOption) (*ListCollectionRecordResp, error) {
	var out ListCollectionRecordResp
	pattern := "/collection"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCollectionDatabaseListCollectionRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
