// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.3
// source: device/device.proto

package device

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDeviceDeleteDevice = "/api.device.Device/DeleteDevice"
const OperationDeviceGetDeviceID = "/api.device.Device/GetDeviceID"
const OperationDeviceGetDeviceInfo = "/api.device.Device/GetDeviceInfo"
const OperationDeviceGetDeviceInfoByMac = "/api.device.Device/GetDeviceInfoByMac"
const OperationDeviceGetDeviceLastReport = "/api.device.Device/GetDeviceLastReport"
const OperationDeviceGetDeviceLastSeen = "/api.device.Device/GetDeviceLastSeen"
const OperationDeviceGetOrRegisterDevice = "/api.device.Device/GetOrRegisterDevice"
const OperationDeviceListDeletedDeviceInfo = "/api.device.Device/ListDeletedDeviceInfo"
const OperationDeviceListDevice = "/api.device.Device/ListDevice"
const OperationDeviceRegisterDevice = "/api.device.Device/RegisterDevice"
const OperationDeviceUnDeleteDevice = "/api.device.Device/UnDeleteDevice"
const OperationDeviceUpdateDeviceLastReport = "/api.device.Device/UpdateDeviceLastReport"
const OperationDeviceUpdateDeviceLastSeen = "/api.device.Device/UpdateDeviceLastSeen"

type DeviceHTTPServer interface {
	DeleteDevice(context.Context, *DeleteDeviceReq) (*Empty, error)
	GetDeviceID(context.Context, *GetDeviceIDReq) (*DeviceInfo, error)
	GetDeviceInfo(context.Context, *GetDeviceInfoReq) (*DeviceInfo, error)
	GetDeviceInfoByMac(context.Context, *GetDeviceInfoByMacReq) (*DeviceInfo, error)
	GetDeviceLastReport(context.Context, *GetDeviceLastReportReq) (*DeviceLastReport, error)
	GetDeviceLastSeen(context.Context, *GetDeviceLastSeenReq) (*DeviceLastSeen, error)
	GetOrRegisterDevice(context.Context, *GetOrRegisterDeviceReq) (*DeviceInfo, error)
	ListDeletedDeviceInfo(context.Context, *ListDeviceReq) (*ListDeviceResp, error)
	ListDevice(context.Context, *ListDeviceReq) (*ListDeviceResp, error)
	RegisterDevice(context.Context, *RegisterDeviceReq) (*DeviceInfo, error)
	UnDeleteDevice(context.Context, *UnDeleteDeviceReq) (*Empty, error)
	UpdateDeviceLastReport(context.Context, *UpdateDeviceLastReportReq) (*Empty, error)
	UpdateDeviceLastSeen(context.Context, *UpdateDeviceLastSeenReq) (*Empty, error)
}

func RegisterDeviceHTTPServer(s *http.Server, srv DeviceHTTPServer) {
	r := s.Route("/")
	r.GET("/device/{id}", _Device_GetDeviceInfo0_HTTP_Handler(srv))
	r.GET("/device/mac/{mac}", _Device_GetDeviceInfoByMac0_HTTP_Handler(srv))
	r.POST("/device", _Device_RegisterDevice0_HTTP_Handler(srv))
	r.POST("/device/get_or_create", _Device_GetOrRegisterDevice0_HTTP_Handler(srv))
	r.POST("/device/{id}/delete", _Device_DeleteDevice0_HTTP_Handler(srv))
	r.GET("/device/deleted", _Device_ListDeletedDeviceInfo0_HTTP_Handler(srv))
	r.POST("/device/{id}/undelete", _Device_UnDeleteDevice0_HTTP_Handler(srv))
	r.GET("/device", _Device_ListDevice0_HTTP_Handler(srv))
	r.POST("/device/{id}/update_last_seen", _Device_UpdateDeviceLastSeen0_HTTP_Handler(srv))
	r.GET("/device/{id}/last_seen", _Device_GetDeviceLastSeen0_HTTP_Handler(srv))
	r.GET("/device/mac/{mac}/id", _Device_GetDeviceID0_HTTP_Handler(srv))
	r.POST("/device/{id}/update_last_report", _Device_UpdateDeviceLastReport0_HTTP_Handler(srv))
	r.GET("/device/{id}/last_report", _Device_GetDeviceLastReport0_HTTP_Handler(srv))
}

func _Device_GetDeviceInfo0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceGetDeviceInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeviceInfo(ctx, req.(*GetDeviceInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceInfo)
		return ctx.Result(200, reply)
	}
}

func _Device_GetDeviceInfoByMac0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceInfoByMacReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceGetDeviceInfoByMac)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeviceInfoByMac(ctx, req.(*GetDeviceInfoByMacReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceInfo)
		return ctx.Result(200, reply)
	}
}

func _Device_RegisterDevice0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceRegisterDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterDevice(ctx, req.(*RegisterDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceInfo)
		return ctx.Result(200, reply)
	}
}

func _Device_GetOrRegisterDevice0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrRegisterDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceGetOrRegisterDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrRegisterDevice(ctx, req.(*GetOrRegisterDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceInfo)
		return ctx.Result(200, reply)
	}
}

func _Device_DeleteDevice0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceDeleteDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDevice(ctx, req.(*DeleteDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Device_ListDeletedDeviceInfo0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeviceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceListDeletedDeviceInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDeletedDeviceInfo(ctx, req.(*ListDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeviceResp)
		return ctx.Result(200, reply)
	}
}

func _Device_UnDeleteDevice0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnDeleteDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceUnDeleteDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnDeleteDevice(ctx, req.(*UnDeleteDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Device_ListDevice0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeviceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceListDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDevice(ctx, req.(*ListDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeviceResp)
		return ctx.Result(200, reply)
	}
}

func _Device_UpdateDeviceLastSeen0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDeviceLastSeenReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceUpdateDeviceLastSeen)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDeviceLastSeen(ctx, req.(*UpdateDeviceLastSeenReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Device_GetDeviceLastSeen0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceLastSeenReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceGetDeviceLastSeen)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeviceLastSeen(ctx, req.(*GetDeviceLastSeenReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceLastSeen)
		return ctx.Result(200, reply)
	}
}

func _Device_GetDeviceID0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceIDReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceGetDeviceID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeviceID(ctx, req.(*GetDeviceIDReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceInfo)
		return ctx.Result(200, reply)
	}
}

func _Device_UpdateDeviceLastReport0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDeviceLastReportReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceUpdateDeviceLastReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDeviceLastReport(ctx, req.(*UpdateDeviceLastReportReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Device_GetDeviceLastReport0_HTTP_Handler(srv DeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceLastReportReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeviceGetDeviceLastReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeviceLastReport(ctx, req.(*GetDeviceLastReportReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceLastReport)
		return ctx.Result(200, reply)
	}
}

type DeviceHTTPClient interface {
	DeleteDevice(ctx context.Context, req *DeleteDeviceReq, opts ...http.CallOption) (rsp *Empty, err error)
	GetDeviceID(ctx context.Context, req *GetDeviceIDReq, opts ...http.CallOption) (rsp *DeviceInfo, err error)
	GetDeviceInfo(ctx context.Context, req *GetDeviceInfoReq, opts ...http.CallOption) (rsp *DeviceInfo, err error)
	GetDeviceInfoByMac(ctx context.Context, req *GetDeviceInfoByMacReq, opts ...http.CallOption) (rsp *DeviceInfo, err error)
	GetDeviceLastReport(ctx context.Context, req *GetDeviceLastReportReq, opts ...http.CallOption) (rsp *DeviceLastReport, err error)
	GetDeviceLastSeen(ctx context.Context, req *GetDeviceLastSeenReq, opts ...http.CallOption) (rsp *DeviceLastSeen, err error)
	GetOrRegisterDevice(ctx context.Context, req *GetOrRegisterDeviceReq, opts ...http.CallOption) (rsp *DeviceInfo, err error)
	ListDeletedDeviceInfo(ctx context.Context, req *ListDeviceReq, opts ...http.CallOption) (rsp *ListDeviceResp, err error)
	ListDevice(ctx context.Context, req *ListDeviceReq, opts ...http.CallOption) (rsp *ListDeviceResp, err error)
	RegisterDevice(ctx context.Context, req *RegisterDeviceReq, opts ...http.CallOption) (rsp *DeviceInfo, err error)
	UnDeleteDevice(ctx context.Context, req *UnDeleteDeviceReq, opts ...http.CallOption) (rsp *Empty, err error)
	UpdateDeviceLastReport(ctx context.Context, req *UpdateDeviceLastReportReq, opts ...http.CallOption) (rsp *Empty, err error)
	UpdateDeviceLastSeen(ctx context.Context, req *UpdateDeviceLastSeenReq, opts ...http.CallOption) (rsp *Empty, err error)
}

type DeviceHTTPClientImpl struct {
	cc *http.Client
}

func NewDeviceHTTPClient(client *http.Client) DeviceHTTPClient {
	return &DeviceHTTPClientImpl{client}
}

func (c *DeviceHTTPClientImpl) DeleteDevice(ctx context.Context, in *DeleteDeviceReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/device/{id}/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceDeleteDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) GetDeviceID(ctx context.Context, in *GetDeviceIDReq, opts ...http.CallOption) (*DeviceInfo, error) {
	var out DeviceInfo
	pattern := "/device/mac/{mac}/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeviceGetDeviceID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) GetDeviceInfo(ctx context.Context, in *GetDeviceInfoReq, opts ...http.CallOption) (*DeviceInfo, error) {
	var out DeviceInfo
	pattern := "/device/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeviceGetDeviceInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) GetDeviceInfoByMac(ctx context.Context, in *GetDeviceInfoByMacReq, opts ...http.CallOption) (*DeviceInfo, error) {
	var out DeviceInfo
	pattern := "/device/mac/{mac}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeviceGetDeviceInfoByMac))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) GetDeviceLastReport(ctx context.Context, in *GetDeviceLastReportReq, opts ...http.CallOption) (*DeviceLastReport, error) {
	var out DeviceLastReport
	pattern := "/device/{id}/last_report"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeviceGetDeviceLastReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) GetDeviceLastSeen(ctx context.Context, in *GetDeviceLastSeenReq, opts ...http.CallOption) (*DeviceLastSeen, error) {
	var out DeviceLastSeen
	pattern := "/device/{id}/last_seen"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeviceGetDeviceLastSeen))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) GetOrRegisterDevice(ctx context.Context, in *GetOrRegisterDeviceReq, opts ...http.CallOption) (*DeviceInfo, error) {
	var out DeviceInfo
	pattern := "/device/get_or_create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceGetOrRegisterDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) ListDeletedDeviceInfo(ctx context.Context, in *ListDeviceReq, opts ...http.CallOption) (*ListDeviceResp, error) {
	var out ListDeviceResp
	pattern := "/device/deleted"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeviceListDeletedDeviceInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) ListDevice(ctx context.Context, in *ListDeviceReq, opts ...http.CallOption) (*ListDeviceResp, error) {
	var out ListDeviceResp
	pattern := "/device"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeviceListDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) RegisterDevice(ctx context.Context, in *RegisterDeviceReq, opts ...http.CallOption) (*DeviceInfo, error) {
	var out DeviceInfo
	pattern := "/device"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceRegisterDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) UnDeleteDevice(ctx context.Context, in *UnDeleteDeviceReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/device/{id}/undelete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceUnDeleteDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) UpdateDeviceLastReport(ctx context.Context, in *UpdateDeviceLastReportReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/device/{id}/update_last_report"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceUpdateDeviceLastReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceHTTPClientImpl) UpdateDeviceLastSeen(ctx context.Context, in *UpdateDeviceLastSeenReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/device/{id}/update_last_seen"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeviceUpdateDeviceLastSeen))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
