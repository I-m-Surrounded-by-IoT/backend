// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.1
// source: database/database.proto

package database

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDatabaseCreateCollectionInfo = "/api.database.Database/CreateCollectionInfo"
const OperationDatabaseCreateDevice = "/api.database.Database/CreateDevice"
const OperationDatabaseFirstOrCreateDevice = "/api.database.Database/FirstOrCreateDevice"
const OperationDatabaseGetDevice = "/api.database.Database/GetDevice"
const OperationDatabaseGetDeviceWithMac = "/api.database.Database/GetDeviceWithMac"
const OperationDatabaseListCollectionInfo = "/api.database.Database/ListCollectionInfo"

type DatabaseHTTPServer interface {
	CreateCollectionInfo(context.Context, *CollectionInfo) (*Empty, error)
	CreateDevice(context.Context, *CreateDeviceReq) (*Device, error)
	FirstOrCreateDevice(context.Context, *CreateDeviceReq) (*Device, error)
	GetDevice(context.Context, *GetDeviceReq) (*Device, error)
	GetDeviceWithMac(context.Context, *GetDeviceWithMacReq) (*Device, error)
	ListCollectionInfo(context.Context, *ListCollectionInfoReq) (*ListCollectionInfoResp, error)
}

func RegisterDatabaseHTTPServer(s *http.Server, srv DatabaseHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/database/create_collection_info", _Database_CreateCollectionInfo0_HTTP_Handler(srv))
	r.POST("/v1/database/list_collection_info", _Database_ListCollectionInfo0_HTTP_Handler(srv))
	r.POST("/v1/database/get_device", _Database_GetDevice0_HTTP_Handler(srv))
	r.POST("/v1/database/get_device_with_mac", _Database_GetDeviceWithMac0_HTTP_Handler(srv))
	r.POST("/v1/database/create_device", _Database_CreateDevice0_HTTP_Handler(srv))
	r.POST("/v1/database/find_or_create_device", _Database_FirstOrCreateDevice0_HTTP_Handler(srv))
}

func _Database_CreateCollectionInfo0_HTTP_Handler(srv DatabaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CollectionInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatabaseCreateCollectionInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCollectionInfo(ctx, req.(*CollectionInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Database_ListCollectionInfo0_HTTP_Handler(srv DatabaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCollectionInfoReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatabaseListCollectionInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCollectionInfo(ctx, req.(*ListCollectionInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCollectionInfoResp)
		return ctx.Result(200, reply)
	}
}

func _Database_GetDevice0_HTTP_Handler(srv DatabaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatabaseGetDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDevice(ctx, req.(*GetDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Device)
		return ctx.Result(200, reply)
	}
}

func _Database_GetDeviceWithMac0_HTTP_Handler(srv DatabaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceWithMacReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatabaseGetDeviceWithMac)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeviceWithMac(ctx, req.(*GetDeviceWithMacReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Device)
		return ctx.Result(200, reply)
	}
}

func _Database_CreateDevice0_HTTP_Handler(srv DatabaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatabaseCreateDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDevice(ctx, req.(*CreateDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Device)
		return ctx.Result(200, reply)
	}
}

func _Database_FirstOrCreateDevice0_HTTP_Handler(srv DatabaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDeviceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDatabaseFirstOrCreateDevice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FirstOrCreateDevice(ctx, req.(*CreateDeviceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Device)
		return ctx.Result(200, reply)
	}
}

type DatabaseHTTPClient interface {
	CreateCollectionInfo(ctx context.Context, req *CollectionInfo, opts ...http.CallOption) (rsp *Empty, err error)
	CreateDevice(ctx context.Context, req *CreateDeviceReq, opts ...http.CallOption) (rsp *Device, err error)
	FirstOrCreateDevice(ctx context.Context, req *CreateDeviceReq, opts ...http.CallOption) (rsp *Device, err error)
	GetDevice(ctx context.Context, req *GetDeviceReq, opts ...http.CallOption) (rsp *Device, err error)
	GetDeviceWithMac(ctx context.Context, req *GetDeviceWithMacReq, opts ...http.CallOption) (rsp *Device, err error)
	ListCollectionInfo(ctx context.Context, req *ListCollectionInfoReq, opts ...http.CallOption) (rsp *ListCollectionInfoResp, err error)
}

type DatabaseHTTPClientImpl struct {
	cc *http.Client
}

func NewDatabaseHTTPClient(client *http.Client) DatabaseHTTPClient {
	return &DatabaseHTTPClientImpl{client}
}

func (c *DatabaseHTTPClientImpl) CreateCollectionInfo(ctx context.Context, in *CollectionInfo, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/v1/database/create_collection_info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatabaseCreateCollectionInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DatabaseHTTPClientImpl) CreateDevice(ctx context.Context, in *CreateDeviceReq, opts ...http.CallOption) (*Device, error) {
	var out Device
	pattern := "/v1/database/create_device"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatabaseCreateDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DatabaseHTTPClientImpl) FirstOrCreateDevice(ctx context.Context, in *CreateDeviceReq, opts ...http.CallOption) (*Device, error) {
	var out Device
	pattern := "/v1/database/find_or_create_device"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatabaseFirstOrCreateDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DatabaseHTTPClientImpl) GetDevice(ctx context.Context, in *GetDeviceReq, opts ...http.CallOption) (*Device, error) {
	var out Device
	pattern := "/v1/database/get_device"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatabaseGetDevice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DatabaseHTTPClientImpl) GetDeviceWithMac(ctx context.Context, in *GetDeviceWithMacReq, opts ...http.CallOption) (*Device, error) {
	var out Device
	pattern := "/v1/database/get_device_with_mac"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatabaseGetDeviceWithMac))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DatabaseHTTPClientImpl) ListCollectionInfo(ctx context.Context, in *ListCollectionInfoReq, opts ...http.CallOption) (*ListCollectionInfoResp, error) {
	var out ListCollectionInfoResp
	pattern := "/v1/database/list_collection_info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDatabaseListCollectionInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
