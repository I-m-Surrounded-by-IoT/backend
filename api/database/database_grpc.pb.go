// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: database/database.proto

package database

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Database_CreateCollectionInfo_FullMethodName = "/api.database.Database/CreateCollectionInfo"
	Database_ListCollectionInfo_FullMethodName   = "/api.database.Database/ListCollectionInfo"
	Database_GetDevice_FullMethodName            = "/api.database.Database/GetDevice"
	Database_GetDeviceWithMac_FullMethodName     = "/api.database.Database/GetDeviceWithMac"
	Database_CreateDevice_FullMethodName         = "/api.database.Database/CreateDevice"
	Database_FirstOrCreateDevice_FullMethodName  = "/api.database.Database/FirstOrCreateDevice"
)

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseClient interface {
	CreateCollectionInfo(ctx context.Context, in *CollectionInfo, opts ...grpc.CallOption) (*Empty, error)
	ListCollectionInfo(ctx context.Context, in *ListCollectionInfoReq, opts ...grpc.CallOption) (*ListCollectionInfoResp, error)
	GetDevice(ctx context.Context, in *GetDeviceReq, opts ...grpc.CallOption) (*Device, error)
	GetDeviceWithMac(ctx context.Context, in *GetDeviceWithMacReq, opts ...grpc.CallOption) (*Device, error)
	CreateDevice(ctx context.Context, in *CreateDeviceReq, opts ...grpc.CallOption) (*Device, error)
	FirstOrCreateDevice(ctx context.Context, in *CreateDeviceReq, opts ...grpc.CallOption) (*Device, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) CreateCollectionInfo(ctx context.Context, in *CollectionInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Database_CreateCollectionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) ListCollectionInfo(ctx context.Context, in *ListCollectionInfoReq, opts ...grpc.CallOption) (*ListCollectionInfoResp, error) {
	out := new(ListCollectionInfoResp)
	err := c.cc.Invoke(ctx, Database_ListCollectionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetDevice(ctx context.Context, in *GetDeviceReq, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, Database_GetDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetDeviceWithMac(ctx context.Context, in *GetDeviceWithMacReq, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, Database_GetDeviceWithMac_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) CreateDevice(ctx context.Context, in *CreateDeviceReq, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, Database_CreateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) FirstOrCreateDevice(ctx context.Context, in *CreateDeviceReq, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, Database_FirstOrCreateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
// All implementations must embed UnimplementedDatabaseServer
// for forward compatibility
type DatabaseServer interface {
	CreateCollectionInfo(context.Context, *CollectionInfo) (*Empty, error)
	ListCollectionInfo(context.Context, *ListCollectionInfoReq) (*ListCollectionInfoResp, error)
	GetDevice(context.Context, *GetDeviceReq) (*Device, error)
	GetDeviceWithMac(context.Context, *GetDeviceWithMacReq) (*Device, error)
	CreateDevice(context.Context, *CreateDeviceReq) (*Device, error)
	FirstOrCreateDevice(context.Context, *CreateDeviceReq) (*Device, error)
	mustEmbedUnimplementedDatabaseServer()
}

// UnimplementedDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (UnimplementedDatabaseServer) CreateCollectionInfo(context.Context, *CollectionInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollectionInfo not implemented")
}
func (UnimplementedDatabaseServer) ListCollectionInfo(context.Context, *ListCollectionInfoReq) (*ListCollectionInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionInfo not implemented")
}
func (UnimplementedDatabaseServer) GetDevice(context.Context, *GetDeviceReq) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDatabaseServer) GetDeviceWithMac(context.Context, *GetDeviceWithMacReq) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceWithMac not implemented")
}
func (UnimplementedDatabaseServer) CreateDevice(context.Context, *CreateDeviceReq) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDatabaseServer) FirstOrCreateDevice(context.Context, *CreateDeviceReq) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirstOrCreateDevice not implemented")
}
func (UnimplementedDatabaseServer) mustEmbedUnimplementedDatabaseServer() {}

// UnsafeDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServer will
// result in compilation errors.
type UnsafeDatabaseServer interface {
	mustEmbedUnimplementedDatabaseServer()
}

func RegisterDatabaseServer(s grpc.ServiceRegistrar, srv DatabaseServer) {
	s.RegisterService(&Database_ServiceDesc, srv)
}

func _Database_CreateCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).CreateCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_CreateCollectionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).CreateCollectionInfo(ctx, req.(*CollectionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_ListCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).ListCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_ListCollectionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).ListCollectionInfo(ctx, req.(*ListCollectionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetDevice(ctx, req.(*GetDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetDeviceWithMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceWithMacReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetDeviceWithMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_GetDeviceWithMac_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetDeviceWithMac(ctx, req.(*GetDeviceWithMacReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).CreateDevice(ctx, req.(*CreateDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_FirstOrCreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).FirstOrCreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_FirstOrCreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).FirstOrCreateDevice(ctx, req.(*CreateDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Database_ServiceDesc is the grpc.ServiceDesc for Database service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Database_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.database.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollectionInfo",
			Handler:    _Database_CreateCollectionInfo_Handler,
		},
		{
			MethodName: "ListCollectionInfo",
			Handler:    _Database_ListCollectionInfo_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _Database_GetDevice_Handler,
		},
		{
			MethodName: "GetDeviceWithMac",
			Handler:    _Database_GetDeviceWithMac_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _Database_CreateDevice_Handler,
		},
		{
			MethodName: "FirstOrCreateDevice",
			Handler:    _Database_FirstOrCreateDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database/database.proto",
}
