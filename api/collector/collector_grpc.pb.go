// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: collector/collector.proto

package collector

import (
	context "context"
	collection "github.com/I-m-Surrounded-by-IoT/backend/api/collection"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Collector_ReportImmediately_FullMethodName     = "/api.collector.Collector/ReportImmediately"
	Collector_SetReportInterval_FullMethodName     = "/api.collector.Collector/SetReportInterval"
	Collector_GetDeviceStreamReport_FullMethodName = "/api.collector.Collector/GetDeviceStreamReport"
	Collector_GetDeviceStreamEvent_FullMethodName  = "/api.collector.Collector/GetDeviceStreamEvent"
)

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorClient interface {
	ReportImmediately(ctx context.Context, in *ReportImmediatelyReq, opts ...grpc.CallOption) (*Empty, error)
	SetReportInterval(ctx context.Context, in *SetReportIntervalReq, opts ...grpc.CallOption) (*SetReportIntervalResp, error)
	GetDeviceStreamReport(ctx context.Context, in *GetDeviceStreamReportReq, opts ...grpc.CallOption) (Collector_GetDeviceStreamReportClient, error)
	GetDeviceStreamEvent(ctx context.Context, in *GetDeviceStreamEventReq, opts ...grpc.CallOption) (Collector_GetDeviceStreamEventClient, error)
}

type collectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorClient(cc grpc.ClientConnInterface) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) ReportImmediately(ctx context.Context, in *ReportImmediatelyReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Collector_ReportImmediately_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) SetReportInterval(ctx context.Context, in *SetReportIntervalReq, opts ...grpc.CallOption) (*SetReportIntervalResp, error) {
	out := new(SetReportIntervalResp)
	err := c.cc.Invoke(ctx, Collector_SetReportInterval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) GetDeviceStreamReport(ctx context.Context, in *GetDeviceStreamReportReq, opts ...grpc.CallOption) (Collector_GetDeviceStreamReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[0], Collector_GetDeviceStreamReport_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorGetDeviceStreamReportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collector_GetDeviceStreamReportClient interface {
	Recv() (*collection.CollectionData, error)
	grpc.ClientStream
}

type collectorGetDeviceStreamReportClient struct {
	grpc.ClientStream
}

func (x *collectorGetDeviceStreamReportClient) Recv() (*collection.CollectionData, error) {
	m := new(collection.CollectionData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorClient) GetDeviceStreamEvent(ctx context.Context, in *GetDeviceStreamEventReq, opts ...grpc.CallOption) (Collector_GetDeviceStreamEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[1], Collector_GetDeviceStreamEvent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorGetDeviceStreamEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collector_GetDeviceStreamEventClient interface {
	Recv() (*GetDeviceStreamEventResp, error)
	grpc.ClientStream
}

type collectorGetDeviceStreamEventClient struct {
	grpc.ClientStream
}

func (x *collectorGetDeviceStreamEventClient) Recv() (*GetDeviceStreamEventResp, error) {
	m := new(GetDeviceStreamEventResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServer is the server API for Collector service.
// All implementations must embed UnimplementedCollectorServer
// for forward compatibility
type CollectorServer interface {
	ReportImmediately(context.Context, *ReportImmediatelyReq) (*Empty, error)
	SetReportInterval(context.Context, *SetReportIntervalReq) (*SetReportIntervalResp, error)
	GetDeviceStreamReport(*GetDeviceStreamReportReq, Collector_GetDeviceStreamReportServer) error
	GetDeviceStreamEvent(*GetDeviceStreamEventReq, Collector_GetDeviceStreamEventServer) error
	mustEmbedUnimplementedCollectorServer()
}

// UnimplementedCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedCollectorServer struct {
}

func (UnimplementedCollectorServer) ReportImmediately(context.Context, *ReportImmediatelyReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportImmediately not implemented")
}
func (UnimplementedCollectorServer) SetReportInterval(context.Context, *SetReportIntervalReq) (*SetReportIntervalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReportInterval not implemented")
}
func (UnimplementedCollectorServer) GetDeviceStreamReport(*GetDeviceStreamReportReq, Collector_GetDeviceStreamReportServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceStreamReport not implemented")
}
func (UnimplementedCollectorServer) GetDeviceStreamEvent(*GetDeviceStreamEventReq, Collector_GetDeviceStreamEventServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceStreamEvent not implemented")
}
func (UnimplementedCollectorServer) mustEmbedUnimplementedCollectorServer() {}

// UnsafeCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServer will
// result in compilation errors.
type UnsafeCollectorServer interface {
	mustEmbedUnimplementedCollectorServer()
}

func RegisterCollectorServer(s grpc.ServiceRegistrar, srv CollectorServer) {
	s.RegisterService(&Collector_ServiceDesc, srv)
}

func _Collector_ReportImmediately_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportImmediatelyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).ReportImmediately(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collector_ReportImmediately_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).ReportImmediately(ctx, req.(*ReportImmediatelyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_SetReportInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReportIntervalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).SetReportInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collector_SetReportInterval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).SetReportInterval(ctx, req.(*SetReportIntervalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_GetDeviceStreamReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeviceStreamReportReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectorServer).GetDeviceStreamReport(m, &collectorGetDeviceStreamReportServer{stream})
}

type Collector_GetDeviceStreamReportServer interface {
	Send(*collection.CollectionData) error
	grpc.ServerStream
}

type collectorGetDeviceStreamReportServer struct {
	grpc.ServerStream
}

func (x *collectorGetDeviceStreamReportServer) Send(m *collection.CollectionData) error {
	return x.ServerStream.SendMsg(m)
}

func _Collector_GetDeviceStreamEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeviceStreamEventReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectorServer).GetDeviceStreamEvent(m, &collectorGetDeviceStreamEventServer{stream})
}

type Collector_GetDeviceStreamEventServer interface {
	Send(*GetDeviceStreamEventResp) error
	grpc.ServerStream
}

type collectorGetDeviceStreamEventServer struct {
	grpc.ServerStream
}

func (x *collectorGetDeviceStreamEventServer) Send(m *GetDeviceStreamEventResp) error {
	return x.ServerStream.SendMsg(m)
}

// Collector_ServiceDesc is the grpc.ServiceDesc for Collector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.collector.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportImmediately",
			Handler:    _Collector_ReportImmediately_Handler,
		},
		{
			MethodName: "SetReportInterval",
			Handler:    _Collector_SetReportInterval_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeviceStreamReport",
			Handler:       _Collector_GetDeviceStreamReport_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDeviceStreamEvent",
			Handler:       _Collector_GetDeviceStreamEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "collector/collector.proto",
}
