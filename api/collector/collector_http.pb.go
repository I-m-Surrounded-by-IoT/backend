// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v5.27.3
// source: collector/collector.proto

package collector

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCollectorBoatControl = "/api.collector.Collector/BoatControl"
const OperationCollectorReportNow = "/api.collector.Collector/ReportNow"
const OperationCollectorSetReportInterval = "/api.collector.Collector/SetReportInterval"

type CollectorHTTPServer interface {
	BoatControl(context.Context, *BoatControlReq) (*Empty, error)
	ReportNow(context.Context, *ReportNowReq) (*Empty, error)
	SetReportInterval(context.Context, *SetReportIntervalReq) (*SetReportIntervalResp, error)
}

func RegisterCollectorHTTPServer(s *http.Server, srv CollectorHTTPServer) {
	r := s.Route("/")
	r.POST("/collector/report_now", _Collector_ReportNow0_HTTP_Handler(srv))
	r.POST("/collector/set_report_interval", _Collector_SetReportInterval0_HTTP_Handler(srv))
	r.POST("/collector/boat_control", _Collector_BoatControl0_HTTP_Handler(srv))
}

func _Collector_ReportNow0_HTTP_Handler(srv CollectorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportNowReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectorReportNow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReportNow(ctx, req.(*ReportNowReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Collector_SetReportInterval0_HTTP_Handler(srv CollectorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetReportIntervalReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectorSetReportInterval)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetReportInterval(ctx, req.(*SetReportIntervalReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetReportIntervalResp)
		return ctx.Result(200, reply)
	}
}

func _Collector_BoatControl0_HTTP_Handler(srv CollectorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BoatControlReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectorBoatControl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BoatControl(ctx, req.(*BoatControlReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type CollectorHTTPClient interface {
	BoatControl(ctx context.Context, req *BoatControlReq, opts ...http.CallOption) (rsp *Empty, err error)
	ReportNow(ctx context.Context, req *ReportNowReq, opts ...http.CallOption) (rsp *Empty, err error)
	SetReportInterval(ctx context.Context, req *SetReportIntervalReq, opts ...http.CallOption) (rsp *SetReportIntervalResp, err error)
}

type CollectorHTTPClientImpl struct {
	cc *http.Client
}

func NewCollectorHTTPClient(client *http.Client) CollectorHTTPClient {
	return &CollectorHTTPClientImpl{client}
}

func (c *CollectorHTTPClientImpl) BoatControl(ctx context.Context, in *BoatControlReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/collector/boat_control"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCollectorBoatControl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CollectorHTTPClientImpl) ReportNow(ctx context.Context, in *ReportNowReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/collector/report_now"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCollectorReportNow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CollectorHTTPClientImpl) SetReportInterval(ctx context.Context, in *SetReportIntervalReq, opts ...http.CallOption) (*SetReportIntervalResp, error) {
	var out SetReportIntervalResp
	pattern := "/collector/set_report_interval"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCollectorSetReportInterval))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
