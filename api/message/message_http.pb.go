// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v5.27.0
// source: message/message.proto

package message

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMessageGetMessage = "/api.message.Message/GetMessage"
const OperationMessageGetMessageList = "/api.message.Message/GetMessageList"
const OperationMessageGetUnreadNum = "/api.message.Message/GetUnreadNum"
const OperationMessageMarkAllRead = "/api.message.Message/MarkAllRead"
const OperationMessageSendMessage = "/api.message.Message/SendMessage"

type MessageHTTPServer interface {
	GetMessage(context.Context, *GetMessageReq) (*MessageRecord, error)
	GetMessageList(context.Context, *GetMessageListReq) (*GetMessageListResp, error)
	GetUnreadNum(context.Context, *GetUnreadNumReq) (*GetUnreadNumResp, error)
	MarkAllRead(context.Context, *MarkAllReadReq) (*Empty, error)
	SendMessage(context.Context, *SendMessageReq) (*Empty, error)
}

func RegisterMessageHTTPServer(s *http.Server, srv MessageHTTPServer) {
	r := s.Route("/")
	r.POST("/message/send_message", _Message_SendMessage0_HTTP_Handler(srv))
	r.POST("/message/mark_all_read", _Message_MarkAllRead0_HTTP_Handler(srv))
	r.GET("/message/get_user_unread_num", _Message_GetUnreadNum0_HTTP_Handler(srv))
	r.GET("/message/get_message", _Message_GetMessage0_HTTP_Handler(srv))
	r.GET("/message/get_message_list", _Message_GetMessageList0_HTTP_Handler(srv))
}

func _Message_SendMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMessageReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageSendMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMessage(ctx, req.(*SendMessageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Message_MarkAllRead0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarkAllReadReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageMarkAllRead)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MarkAllRead(ctx, req.(*MarkAllReadReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Message_GetUnreadNum0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUnreadNumReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageGetUnreadNum)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUnreadNum(ctx, req.(*GetUnreadNumReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUnreadNumResp)
		return ctx.Result(200, reply)
	}
}

func _Message_GetMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMessageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageGetMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMessage(ctx, req.(*GetMessageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MessageRecord)
		return ctx.Result(200, reply)
	}
}

func _Message_GetMessageList0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMessageListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageGetMessageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMessageList(ctx, req.(*GetMessageListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMessageListResp)
		return ctx.Result(200, reply)
	}
}

type MessageHTTPClient interface {
	GetMessage(ctx context.Context, req *GetMessageReq, opts ...http.CallOption) (rsp *MessageRecord, err error)
	GetMessageList(ctx context.Context, req *GetMessageListReq, opts ...http.CallOption) (rsp *GetMessageListResp, err error)
	GetUnreadNum(ctx context.Context, req *GetUnreadNumReq, opts ...http.CallOption) (rsp *GetUnreadNumResp, err error)
	MarkAllRead(ctx context.Context, req *MarkAllReadReq, opts ...http.CallOption) (rsp *Empty, err error)
	SendMessage(ctx context.Context, req *SendMessageReq, opts ...http.CallOption) (rsp *Empty, err error)
}

type MessageHTTPClientImpl struct {
	cc *http.Client
}

func NewMessageHTTPClient(client *http.Client) MessageHTTPClient {
	return &MessageHTTPClientImpl{client}
}

func (c *MessageHTTPClientImpl) GetMessage(ctx context.Context, in *GetMessageReq, opts ...http.CallOption) (*MessageRecord, error) {
	var out MessageRecord
	pattern := "/message/get_message"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMessageGetMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) GetMessageList(ctx context.Context, in *GetMessageListReq, opts ...http.CallOption) (*GetMessageListResp, error) {
	var out GetMessageListResp
	pattern := "/message/get_message_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMessageGetMessageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) GetUnreadNum(ctx context.Context, in *GetUnreadNumReq, opts ...http.CallOption) (*GetUnreadNumResp, error) {
	var out GetUnreadNumResp
	pattern := "/message/get_user_unread_num"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMessageGetUnreadNum))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) MarkAllRead(ctx context.Context, in *MarkAllReadReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/message/mark_all_read"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMessageMarkAllRead))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) SendMessage(ctx context.Context, in *SendMessageReq, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/message/send_message"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMessageSendMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
