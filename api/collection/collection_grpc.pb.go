// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: collection/collection.proto

package collection

import (
	context "context"
	waterquality "github.com/I-m-Surrounded-by-IoT/backend/api/waterquality"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Collection_CreateCollectionRecord_FullMethodName            = "/api.collection.Collection/CreateCollectionRecord"
	Collection_ListCollectionRecord_FullMethodName              = "/api.collection.Collection/ListCollectionRecord"
	Collection_GetPredictQuality_FullMethodName                 = "/api.collection.Collection/GetPredictQuality"
	Collection_GetDeviceStreamReport_FullMethodName             = "/api.collection.Collection/GetDeviceStreamReport"
	Collection_GetDeviceStreamEvent_FullMethodName              = "/api.collection.Collection/GetDeviceStreamEvent"
	Collection_GetDeviceLastReport_FullMethodName               = "/api.collection.Collection/GetDeviceLastReport"
	Collection_GetLatestRecordsWithinRange_FullMethodName       = "/api.collection.Collection/GetLatestRecordsWithinRange"
	Collection_GetLatestIdWithinRange_FullMethodName            = "/api.collection.Collection/GetLatestIdWithinRange"
	Collection_GetStreamLatestRecordsWithinRange_FullMethodName = "/api.collection.Collection/GetStreamLatestRecordsWithinRange"
	Collection_GetStreamLatestIdWithinRange_FullMethodName      = "/api.collection.Collection/GetStreamLatestIdWithinRange"
)

// CollectionClient is the client API for Collection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionClient interface {
	CreateCollectionRecord(ctx context.Context, in *CreateCollectionRecordReq, opts ...grpc.CallOption) (*Empty, error)
	ListCollectionRecord(ctx context.Context, in *ListCollectionRecordReq, opts ...grpc.CallOption) (*ListCollectionRecordResp, error)
	GetPredictQuality(ctx context.Context, in *GetPredictQualityReq, opts ...grpc.CallOption) (*waterquality.PredictAndGuessResp, error)
	GetDeviceStreamReport(ctx context.Context, in *GetDeviceStreamReportReq, opts ...grpc.CallOption) (Collection_GetDeviceStreamReportClient, error)
	GetDeviceStreamEvent(ctx context.Context, in *GetDeviceStreamEventReq, opts ...grpc.CallOption) (Collection_GetDeviceStreamEventClient, error)
	GetDeviceLastReport(ctx context.Context, in *GetDeviceLastReportReq, opts ...grpc.CallOption) (*CollectionRecord, error)
	GetLatestRecordsWithinRange(ctx context.Context, in *GetLatestWithinRangeReq, opts ...grpc.CallOption) (*GetLatestRecordsWithinRangeResp, error)
	GetLatestIdWithinRange(ctx context.Context, in *GetLatestWithinRangeReq, opts ...grpc.CallOption) (*GetLatestIdWithinRangeResp, error)
	GetStreamLatestRecordsWithinRange(ctx context.Context, in *GetStreamLatestWithinRangeReq, opts ...grpc.CallOption) (Collection_GetStreamLatestRecordsWithinRangeClient, error)
	GetStreamLatestIdWithinRange(ctx context.Context, in *GetStreamLatestWithinRangeReq, opts ...grpc.CallOption) (Collection_GetStreamLatestIdWithinRangeClient, error)
}

type collectionClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionClient(cc grpc.ClientConnInterface) CollectionClient {
	return &collectionClient{cc}
}

func (c *collectionClient) CreateCollectionRecord(ctx context.Context, in *CreateCollectionRecordReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Collection_CreateCollectionRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) ListCollectionRecord(ctx context.Context, in *ListCollectionRecordReq, opts ...grpc.CallOption) (*ListCollectionRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCollectionRecordResp)
	err := c.cc.Invoke(ctx, Collection_ListCollectionRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) GetPredictQuality(ctx context.Context, in *GetPredictQualityReq, opts ...grpc.CallOption) (*waterquality.PredictAndGuessResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(waterquality.PredictAndGuessResp)
	err := c.cc.Invoke(ctx, Collection_GetPredictQuality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) GetDeviceStreamReport(ctx context.Context, in *GetDeviceStreamReportReq, opts ...grpc.CallOption) (Collection_GetDeviceStreamReportClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Collection_ServiceDesc.Streams[0], Collection_GetDeviceStreamReport_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &collectionGetDeviceStreamReportClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collection_GetDeviceStreamReportClient interface {
	Recv() (*CreateCollectionRecordReq, error)
	grpc.ClientStream
}

type collectionGetDeviceStreamReportClient struct {
	grpc.ClientStream
}

func (x *collectionGetDeviceStreamReportClient) Recv() (*CreateCollectionRecordReq, error) {
	m := new(CreateCollectionRecordReq)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectionClient) GetDeviceStreamEvent(ctx context.Context, in *GetDeviceStreamEventReq, opts ...grpc.CallOption) (Collection_GetDeviceStreamEventClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Collection_ServiceDesc.Streams[1], Collection_GetDeviceStreamEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &collectionGetDeviceStreamEventClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collection_GetDeviceStreamEventClient interface {
	Recv() (*GetDeviceStreamEventResp, error)
	grpc.ClientStream
}

type collectionGetDeviceStreamEventClient struct {
	grpc.ClientStream
}

func (x *collectionGetDeviceStreamEventClient) Recv() (*GetDeviceStreamEventResp, error) {
	m := new(GetDeviceStreamEventResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectionClient) GetDeviceLastReport(ctx context.Context, in *GetDeviceLastReportReq, opts ...grpc.CallOption) (*CollectionRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionRecord)
	err := c.cc.Invoke(ctx, Collection_GetDeviceLastReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) GetLatestRecordsWithinRange(ctx context.Context, in *GetLatestWithinRangeReq, opts ...grpc.CallOption) (*GetLatestRecordsWithinRangeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestRecordsWithinRangeResp)
	err := c.cc.Invoke(ctx, Collection_GetLatestRecordsWithinRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) GetLatestIdWithinRange(ctx context.Context, in *GetLatestWithinRangeReq, opts ...grpc.CallOption) (*GetLatestIdWithinRangeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestIdWithinRangeResp)
	err := c.cc.Invoke(ctx, Collection_GetLatestIdWithinRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) GetStreamLatestRecordsWithinRange(ctx context.Context, in *GetStreamLatestWithinRangeReq, opts ...grpc.CallOption) (Collection_GetStreamLatestRecordsWithinRangeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Collection_ServiceDesc.Streams[2], Collection_GetStreamLatestRecordsWithinRange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &collectionGetStreamLatestRecordsWithinRangeClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collection_GetStreamLatestRecordsWithinRangeClient interface {
	Recv() (*GetStreamLatestRecordsWithinRangeResp, error)
	grpc.ClientStream
}

type collectionGetStreamLatestRecordsWithinRangeClient struct {
	grpc.ClientStream
}

func (x *collectionGetStreamLatestRecordsWithinRangeClient) Recv() (*GetStreamLatestRecordsWithinRangeResp, error) {
	m := new(GetStreamLatestRecordsWithinRangeResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectionClient) GetStreamLatestIdWithinRange(ctx context.Context, in *GetStreamLatestWithinRangeReq, opts ...grpc.CallOption) (Collection_GetStreamLatestIdWithinRangeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Collection_ServiceDesc.Streams[3], Collection_GetStreamLatestIdWithinRange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &collectionGetStreamLatestIdWithinRangeClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collection_GetStreamLatestIdWithinRangeClient interface {
	Recv() (*GetStreamLatestIdWithinRangeResp, error)
	grpc.ClientStream
}

type collectionGetStreamLatestIdWithinRangeClient struct {
	grpc.ClientStream
}

func (x *collectionGetStreamLatestIdWithinRangeClient) Recv() (*GetStreamLatestIdWithinRangeResp, error) {
	m := new(GetStreamLatestIdWithinRangeResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectionServer is the server API for Collection service.
// All implementations must embed UnimplementedCollectionServer
// for forward compatibility
type CollectionServer interface {
	CreateCollectionRecord(context.Context, *CreateCollectionRecordReq) (*Empty, error)
	ListCollectionRecord(context.Context, *ListCollectionRecordReq) (*ListCollectionRecordResp, error)
	GetPredictQuality(context.Context, *GetPredictQualityReq) (*waterquality.PredictAndGuessResp, error)
	GetDeviceStreamReport(*GetDeviceStreamReportReq, Collection_GetDeviceStreamReportServer) error
	GetDeviceStreamEvent(*GetDeviceStreamEventReq, Collection_GetDeviceStreamEventServer) error
	GetDeviceLastReport(context.Context, *GetDeviceLastReportReq) (*CollectionRecord, error)
	GetLatestRecordsWithinRange(context.Context, *GetLatestWithinRangeReq) (*GetLatestRecordsWithinRangeResp, error)
	GetLatestIdWithinRange(context.Context, *GetLatestWithinRangeReq) (*GetLatestIdWithinRangeResp, error)
	GetStreamLatestRecordsWithinRange(*GetStreamLatestWithinRangeReq, Collection_GetStreamLatestRecordsWithinRangeServer) error
	GetStreamLatestIdWithinRange(*GetStreamLatestWithinRangeReq, Collection_GetStreamLatestIdWithinRangeServer) error
	mustEmbedUnimplementedCollectionServer()
}

// UnimplementedCollectionServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionServer struct {
}

func (UnimplementedCollectionServer) CreateCollectionRecord(context.Context, *CreateCollectionRecordReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollectionRecord not implemented")
}
func (UnimplementedCollectionServer) ListCollectionRecord(context.Context, *ListCollectionRecordReq) (*ListCollectionRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionRecord not implemented")
}
func (UnimplementedCollectionServer) GetPredictQuality(context.Context, *GetPredictQualityReq) (*waterquality.PredictAndGuessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictQuality not implemented")
}
func (UnimplementedCollectionServer) GetDeviceStreamReport(*GetDeviceStreamReportReq, Collection_GetDeviceStreamReportServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceStreamReport not implemented")
}
func (UnimplementedCollectionServer) GetDeviceStreamEvent(*GetDeviceStreamEventReq, Collection_GetDeviceStreamEventServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceStreamEvent not implemented")
}
func (UnimplementedCollectionServer) GetDeviceLastReport(context.Context, *GetDeviceLastReportReq) (*CollectionRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceLastReport not implemented")
}
func (UnimplementedCollectionServer) GetLatestRecordsWithinRange(context.Context, *GetLatestWithinRangeReq) (*GetLatestRecordsWithinRangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRecordsWithinRange not implemented")
}
func (UnimplementedCollectionServer) GetLatestIdWithinRange(context.Context, *GetLatestWithinRangeReq) (*GetLatestIdWithinRangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestIdWithinRange not implemented")
}
func (UnimplementedCollectionServer) GetStreamLatestRecordsWithinRange(*GetStreamLatestWithinRangeReq, Collection_GetStreamLatestRecordsWithinRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamLatestRecordsWithinRange not implemented")
}
func (UnimplementedCollectionServer) GetStreamLatestIdWithinRange(*GetStreamLatestWithinRangeReq, Collection_GetStreamLatestIdWithinRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamLatestIdWithinRange not implemented")
}
func (UnimplementedCollectionServer) mustEmbedUnimplementedCollectionServer() {}

// UnsafeCollectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionServer will
// result in compilation errors.
type UnsafeCollectionServer interface {
	mustEmbedUnimplementedCollectionServer()
}

func RegisterCollectionServer(s grpc.ServiceRegistrar, srv CollectionServer) {
	s.RegisterService(&Collection_ServiceDesc, srv)
}

func _Collection_CreateCollectionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).CreateCollectionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_CreateCollectionRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).CreateCollectionRecord(ctx, req.(*CreateCollectionRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_ListCollectionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).ListCollectionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_ListCollectionRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).ListCollectionRecord(ctx, req.(*ListCollectionRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_GetPredictQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictQualityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).GetPredictQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_GetPredictQuality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).GetPredictQuality(ctx, req.(*GetPredictQualityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_GetDeviceStreamReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeviceStreamReportReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionServer).GetDeviceStreamReport(m, &collectionGetDeviceStreamReportServer{ServerStream: stream})
}

type Collection_GetDeviceStreamReportServer interface {
	Send(*CreateCollectionRecordReq) error
	grpc.ServerStream
}

type collectionGetDeviceStreamReportServer struct {
	grpc.ServerStream
}

func (x *collectionGetDeviceStreamReportServer) Send(m *CreateCollectionRecordReq) error {
	return x.ServerStream.SendMsg(m)
}

func _Collection_GetDeviceStreamEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeviceStreamEventReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionServer).GetDeviceStreamEvent(m, &collectionGetDeviceStreamEventServer{ServerStream: stream})
}

type Collection_GetDeviceStreamEventServer interface {
	Send(*GetDeviceStreamEventResp) error
	grpc.ServerStream
}

type collectionGetDeviceStreamEventServer struct {
	grpc.ServerStream
}

func (x *collectionGetDeviceStreamEventServer) Send(m *GetDeviceStreamEventResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Collection_GetDeviceLastReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceLastReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).GetDeviceLastReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_GetDeviceLastReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).GetDeviceLastReport(ctx, req.(*GetDeviceLastReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_GetLatestRecordsWithinRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestWithinRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).GetLatestRecordsWithinRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_GetLatestRecordsWithinRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).GetLatestRecordsWithinRange(ctx, req.(*GetLatestWithinRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_GetLatestIdWithinRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestWithinRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).GetLatestIdWithinRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_GetLatestIdWithinRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).GetLatestIdWithinRange(ctx, req.(*GetLatestWithinRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_GetStreamLatestRecordsWithinRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStreamLatestWithinRangeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionServer).GetStreamLatestRecordsWithinRange(m, &collectionGetStreamLatestRecordsWithinRangeServer{ServerStream: stream})
}

type Collection_GetStreamLatestRecordsWithinRangeServer interface {
	Send(*GetStreamLatestRecordsWithinRangeResp) error
	grpc.ServerStream
}

type collectionGetStreamLatestRecordsWithinRangeServer struct {
	grpc.ServerStream
}

func (x *collectionGetStreamLatestRecordsWithinRangeServer) Send(m *GetStreamLatestRecordsWithinRangeResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Collection_GetStreamLatestIdWithinRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStreamLatestWithinRangeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionServer).GetStreamLatestIdWithinRange(m, &collectionGetStreamLatestIdWithinRangeServer{ServerStream: stream})
}

type Collection_GetStreamLatestIdWithinRangeServer interface {
	Send(*GetStreamLatestIdWithinRangeResp) error
	grpc.ServerStream
}

type collectionGetStreamLatestIdWithinRangeServer struct {
	grpc.ServerStream
}

func (x *collectionGetStreamLatestIdWithinRangeServer) Send(m *GetStreamLatestIdWithinRangeResp) error {
	return x.ServerStream.SendMsg(m)
}

// Collection_ServiceDesc is the grpc.ServiceDesc for Collection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.collection.Collection",
	HandlerType: (*CollectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollectionRecord",
			Handler:    _Collection_CreateCollectionRecord_Handler,
		},
		{
			MethodName: "ListCollectionRecord",
			Handler:    _Collection_ListCollectionRecord_Handler,
		},
		{
			MethodName: "GetPredictQuality",
			Handler:    _Collection_GetPredictQuality_Handler,
		},
		{
			MethodName: "GetDeviceLastReport",
			Handler:    _Collection_GetDeviceLastReport_Handler,
		},
		{
			MethodName: "GetLatestRecordsWithinRange",
			Handler:    _Collection_GetLatestRecordsWithinRange_Handler,
		},
		{
			MethodName: "GetLatestIdWithinRange",
			Handler:    _Collection_GetLatestIdWithinRange_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeviceStreamReport",
			Handler:       _Collection_GetDeviceStreamReport_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDeviceStreamEvent",
			Handler:       _Collection_GetDeviceStreamEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStreamLatestRecordsWithinRange",
			Handler:       _Collection_GetStreamLatestRecordsWithinRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStreamLatestIdWithinRange",
			Handler:       _Collection_GetStreamLatestIdWithinRange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "collection/collection.proto",
}
