// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: conf.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Registry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etcd *Registry_Etcd `protobuf:"bytes,2,opt,name=etcd,proto3" json:"etcd,omitempty"`
}

func (x *Registry) Reset() {
	*x = Registry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registry) ProtoMessage() {}

func (x *Registry) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registry.ProtoReflect.Descriptor instead.
func (*Registry) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{0}
}

func (x *Registry) GetEtcd() *Registry_Etcd {
	if x != nil {
		return x.Etcd
	}
	return nil
}

type WebServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr           string               `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty" env:"WEB_ADDR"` // @gotags: env:"WEB_ADDR"
	Tls            *WebServerConfig_TLS `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	CustomEndpoint string               `protobuf:"bytes,3,opt,name=custom_endpoint,json=customEndpoint,proto3" json:"custom_endpoint,omitempty" env:"WEB_CUSTOM_ENDPOINT"` // @gotags: env:"WEB_CUSTOM_ENDPOINT"
}

func (x *WebServerConfig) Reset() {
	*x = WebServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebServerConfig) ProtoMessage() {}

func (x *WebServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebServerConfig.ProtoReflect.Descriptor instead.
func (*WebServerConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{1}
}

func (x *WebServerConfig) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WebServerConfig) GetTls() *WebServerConfig_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *WebServerConfig) GetCustomEndpoint() string {
	if x != nil {
		return x.CustomEndpoint
	}
	return ""
}

type GrpcServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr           string                `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty" env:"GRPC_ADDR"` // @gotags: env:"GRPC_ADDR"
	Tls            *GrpcServerConfig_TLS `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	CustomEndpoint string                `protobuf:"bytes,3,opt,name=custom_endpoint,json=customEndpoint,proto3" json:"custom_endpoint,omitempty" env:"GRPC_CUSTOM_ENDPOINT"` // @gotags: env:"GRPC_CUSTOM_ENDPOINT"
	Timeout        *durationpb.Duration  `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty" env:"GRPC_SERVER_TIMEOUT"`                                     // @gotags: env:"GRPC_SERVER_TIMEOUT"
	JwtSecret      string                `protobuf:"bytes,5,opt,name=jwt_secret,json=jwtSecret,proto3" json:"jwt_secret,omitempty" env:"GRPC_SERVER_JWT_SECRET"`                // @gotags: env:"GRPC_SERVER_JWT_SECRET"
}

func (x *GrpcServerConfig) Reset() {
	*x = GrpcServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcServerConfig) ProtoMessage() {}

func (x *GrpcServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcServerConfig.ProtoReflect.Descriptor instead.
func (*GrpcServerConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{2}
}

func (x *GrpcServerConfig) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *GrpcServerConfig) GetTls() *GrpcServerConfig_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *GrpcServerConfig) GetCustomEndpoint() string {
	if x != nil {
		return x.CustomEndpoint
	}
	return ""
}

func (x *GrpcServerConfig) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *GrpcServerConfig) GetJwtSecret() string {
	if x != nil {
		return x.JwtSecret
	}
	return ""
}

type TcpServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr           string               `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty" env:"TCP_ADDR"` // @gotags: env:"TCP_ADDR"
	Tls            *TcpServer_TLS       `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	CustomEndpoint string               `protobuf:"bytes,3,opt,name=custom_endpoint,json=customEndpoint,proto3" json:"custom_endpoint,omitempty" env:"TCP_CUSTOM_ENDPOINT"` // @gotags: env:"TCP_CUSTOM_ENDPOINT"
	Timeout        *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty" env:"TCP_SERVER_TIMEOUT"`                                     // @gotags: env:"TCP_SERVER_TIMEOUT"
}

func (x *TcpServer) Reset() {
	*x = TcpServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpServer) ProtoMessage() {}

func (x *TcpServer) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpServer.ProtoReflect.Descriptor instead.
func (*TcpServer) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{3}
}

func (x *TcpServer) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *TcpServer) GetTls() *TcpServer_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *TcpServer) GetCustomEndpoint() string {
	if x != nil {
		return x.CustomEndpoint
	}
	return ""
}

func (x *TcpServer) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type KafkaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brokers  string `protobuf:"bytes,1,opt,name=brokers,proto3" json:"brokers,omitempty" env:"KAFKA_BROKERS"`   // @gotags: env:"KAFKA_BROKERS"
	User     string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty" env:"KAFKA_USER"`         // @gotags: env:"KAFKA_USER"
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" env:"KAFKA_PASSWORD"` // @gotags: env:"KAFKA_PASSWORD"
}

func (x *KafkaConfig) Reset() {
	*x = KafkaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConfig) ProtoMessage() {}

func (x *KafkaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConfig.ProtoReflect.Descriptor instead.
func (*KafkaConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{4}
}

func (x *KafkaConfig) GetBrokers() string {
	if x != nil {
		return x.Brokers
	}
	return ""
}

func (x *KafkaConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *KafkaConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RedisConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty" env:"REDIS_ADDR"`         // @gotags: env:"REDIS_ADDR"
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" env:"REDIS_USERNAME"` // @gotags: env:"REDIS_USERNAME"
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" env:"REDIS_PASSWORD"` // @gotags: env:"REDIS_PASSWORD"
	Db       int32  `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty" env:"REDIS_DB"`            // @gotags: env:"REDIS_DB"
}

func (x *RedisConfig) Reset() {
	*x = RedisConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfig) ProtoMessage() {}

func (x *RedisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfig.ProtoReflect.Descriptor instead.
func (*RedisConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{5}
}

func (x *RedisConfig) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *RedisConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RedisConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RedisConfig) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

type MTQQConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty" env:"MQTT_ADDR"`                         // @gotags: env:"MQTT_ADDR"
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty" env:"MQTT_CLIENT_ID"` // @gotags: env:"MQTT_CLIENT_ID"
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" env:"MQTT_PASSWORD"`                 // @gotags: env:"MQTT_PASSWORD"
}

func (x *MTQQConfig) Reset() {
	*x = MTQQConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTQQConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTQQConfig) ProtoMessage() {}

func (x *MTQQConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTQQConfig.ProtoReflect.Descriptor instead.
func (*MTQQConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{6}
}

func (x *MTQQConfig) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *MTQQConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MTQQConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CollectorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mqtt *MTQQConfig `protobuf:"bytes,1,opt,name=mqtt,proto3" json:"mqtt,omitempty"`
}

func (x *CollectorConfig) Reset() {
	*x = CollectorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorConfig) ProtoMessage() {}

func (x *CollectorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorConfig.ProtoReflect.Descriptor instead.
func (*CollectorConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{7}
}

func (x *CollectorConfig) GetMqtt() *MTQQConfig {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

type CollectorServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   *GrpcServerConfig `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Registry *Registry         `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	Config   *CollectorConfig  `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Kafka    *KafkaConfig      `protobuf:"bytes,4,opt,name=kafka,proto3" json:"kafka,omitempty"`
	Redis    *RedisConfig      `protobuf:"bytes,5,opt,name=redis,proto3" json:"redis,omitempty"`
}

func (x *CollectorServer) Reset() {
	*x = CollectorServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorServer) ProtoMessage() {}

func (x *CollectorServer) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorServer.ProtoReflect.Descriptor instead.
func (*CollectorServer) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{8}
}

func (x *CollectorServer) GetServer() *GrpcServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *CollectorServer) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *CollectorServer) GetConfig() *CollectorConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CollectorServer) GetKafka() *KafkaConfig {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *CollectorServer) GetRedis() *RedisConfig {
	if x != nil {
		return x.Redis
	}
	return nil
}

type CollectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CollectionConfig) Reset() {
	*x = CollectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionConfig) ProtoMessage() {}

func (x *CollectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionConfig.ProtoReflect.Descriptor instead.
func (*CollectionConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{9}
}

type CollectionServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   *GrpcServerConfig     `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Registry *Registry             `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	Database *DatabaseServerConfig `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Config   *CollectionConfig     `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Kafka    *KafkaConfig          `protobuf:"bytes,5,opt,name=kafka,proto3" json:"kafka,omitempty"`
}

func (x *CollectionServer) Reset() {
	*x = CollectionServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionServer) ProtoMessage() {}

func (x *CollectionServer) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionServer.ProtoReflect.Descriptor instead.
func (*CollectionServer) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{10}
}

func (x *CollectionServer) GetServer() *GrpcServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *CollectionServer) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *CollectionServer) GetDatabase() *DatabaseServerConfig {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *CollectionServer) GetConfig() *CollectionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CollectionServer) GetKafka() *KafkaConfig {
	if x != nil {
		return x.Kafka
	}
	return nil
}

type DatabaseServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host        string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" env:"DATABASE_HOST"`                                   // @gotags: env:"DATABASE_HOST"
	Port        uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty" env:"DATABASE_PORT"`                                  // @gotags: env:"DATABASE_PORT"
	User        string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty" env:"DATABASE_USER"`                                   // @gotags: env:"DATABASE_USER"
	Password    string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty" env:"DATABASE_PASSWORD"`                           // @gotags: env:"DATABASE_PASSWORD"
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty" env:"DATABASE_NAME"`                                   // @gotags: env:"DATABASE_NAME"
	SslMode     string `protobuf:"bytes,6,opt,name=ssl_mode,json=sslMode,proto3" json:"ssl_mode,omitempty" env:"DATABASE_SSLMODE"`              // @gotags: env:"DATABASE_SSLMODE"
	AutoMigrate bool   `protobuf:"varint,7,opt,name=auto_migrate,json=autoMigrate,proto3" json:"auto_migrate,omitempty" env:"DATABASE_AUTOMIGRATE"` // @gotags: env:"DATABASE_AUTOMIGRATE"
}

func (x *DatabaseServerConfig) Reset() {
	*x = DatabaseServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseServerConfig) ProtoMessage() {}

func (x *DatabaseServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseServerConfig.ProtoReflect.Descriptor instead.
func (*DatabaseServerConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{11}
}

func (x *DatabaseServerConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DatabaseServerConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DatabaseServerConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DatabaseServerConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DatabaseServerConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseServerConfig) GetSslMode() string {
	if x != nil {
		return x.SslMode
	}
	return ""
}

func (x *DatabaseServerConfig) GetAutoMigrate() bool {
	if x != nil {
		return x.AutoMigrate
	}
	return false
}

type UserConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserConfig) Reset() {
	*x = UserConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConfig) ProtoMessage() {}

func (x *UserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConfig.ProtoReflect.Descriptor instead.
func (*UserConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{12}
}

type UserServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   *GrpcServerConfig     `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Registry *Registry             `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	Database *DatabaseServerConfig `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Config   *UserConfig           `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Redis    *RedisConfig          `protobuf:"bytes,5,opt,name=redis,proto3" json:"redis,omitempty"`
}

func (x *UserServer) Reset() {
	*x = UserServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServer) ProtoMessage() {}

func (x *UserServer) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServer.ProtoReflect.Descriptor instead.
func (*UserServer) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{13}
}

func (x *UserServer) GetServer() *GrpcServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *UserServer) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *UserServer) GetDatabase() *DatabaseServerConfig {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *UserServer) GetConfig() *UserConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UserServer) GetRedis() *RedisConfig {
	if x != nil {
		return x.Redis
	}
	return nil
}

type WebConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jwt *WebConfig_JWT `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt,omitempty"`
}

func (x *WebConfig) Reset() {
	*x = WebConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebConfig) ProtoMessage() {}

func (x *WebConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebConfig.ProtoReflect.Descriptor instead.
func (*WebConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{14}
}

func (x *WebConfig) GetJwt() *WebConfig_JWT {
	if x != nil {
		return x.Jwt
	}
	return nil
}

type WebServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   *WebServerConfig `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Registry *Registry        `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	Config   *WebConfig       `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Redis    *RedisConfig     `protobuf:"bytes,4,opt,name=redis,proto3" json:"redis,omitempty"`
}

func (x *WebServer) Reset() {
	*x = WebServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebServer) ProtoMessage() {}

func (x *WebServer) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebServer.ProtoReflect.Descriptor instead.
func (*WebServer) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{15}
}

func (x *WebServer) GetServer() *WebServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *WebServer) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *WebServer) GetConfig() *WebConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WebServer) GetRedis() *RedisConfig {
	if x != nil {
		return x.Redis
	}
	return nil
}

type LogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogConfig) Reset() {
	*x = LogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConfig) ProtoMessage() {}

func (x *LogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConfig.ProtoReflect.Descriptor instead.
func (*LogConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{16}
}

type LogServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   *GrpcServerConfig     `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Registry *Registry             `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	Database *DatabaseServerConfig `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Config   *LogConfig            `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Kafka    *KafkaConfig          `protobuf:"bytes,5,opt,name=kafka,proto3" json:"kafka,omitempty"`
}

func (x *LogServer) Reset() {
	*x = LogServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogServer) ProtoMessage() {}

func (x *LogServer) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogServer.ProtoReflect.Descriptor instead.
func (*LogServer) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{17}
}

func (x *LogServer) GetServer() *GrpcServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *LogServer) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *LogServer) GetDatabase() *DatabaseServerConfig {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *LogServer) GetConfig() *LogConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *LogServer) GetKafka() *KafkaConfig {
	if x != nil {
		return x.Kafka
	}
	return nil
}

type EmqxConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api       string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty" env:"EMQX_API"`             // @gotags: env:"EMQX_API"
	Appid     string `protobuf:"bytes,2,opt,name=appid,proto3" json:"appid,omitempty" env:"EMQX_APPID"`         // @gotags: env:"EMQX_APPID"
	Appsecret string `protobuf:"bytes,3,opt,name=appsecret,proto3" json:"appsecret,omitempty" env:"EMQX_APPSECRET"` // @gotags: env:"EMQX_APPSECRET"
}

func (x *EmqxConfig) Reset() {
	*x = EmqxConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmqxConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmqxConfig) ProtoMessage() {}

func (x *EmqxConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmqxConfig.ProtoReflect.Descriptor instead.
func (*EmqxConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{18}
}

func (x *EmqxConfig) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *EmqxConfig) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *EmqxConfig) GetAppsecret() string {
	if x != nil {
		return x.Appsecret
	}
	return ""
}

type DeviceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emqx *EmqxConfig `protobuf:"bytes,1,opt,name=emqx,proto3" json:"emqx,omitempty"`
}

func (x *DeviceConfig) Reset() {
	*x = DeviceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfig) ProtoMessage() {}

func (x *DeviceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfig.ProtoReflect.Descriptor instead.
func (*DeviceConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{19}
}

func (x *DeviceConfig) GetEmqx() *EmqxConfig {
	if x != nil {
		return x.Emqx
	}
	return nil
}

type DeviceServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   *GrpcServerConfig     `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Registry *Registry             `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	Database *DatabaseServerConfig `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Config   *DeviceConfig         `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Redis    *RedisConfig          `protobuf:"bytes,5,opt,name=redis,proto3" json:"redis,omitempty"`
}

func (x *DeviceServer) Reset() {
	*x = DeviceServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceServer) ProtoMessage() {}

func (x *DeviceServer) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceServer.ProtoReflect.Descriptor instead.
func (*DeviceServer) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{20}
}

func (x *DeviceServer) GetServer() *GrpcServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *DeviceServer) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *DeviceServer) GetDatabase() *DatabaseServerConfig {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *DeviceServer) GetConfig() *DeviceConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DeviceServer) GetRedis() *RedisConfig {
	if x != nil {
		return x.Redis
	}
	return nil
}

type SmtpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" env:"SMTP_HOST"`         // @gotags: env:"SMTP_HOST"
	Port     uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty" env:"SMTP_PORT"`        // @gotags: env:"SMTP_PORT"
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty" env:"SMTP_PROTOCOL"` // @gotags: env:"SMTP_PROTOCOL"
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" env:"SMTP_USERNAME"` // @gotags: env:"SMTP_USERNAME"
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty" env:"SMTP_PASSWORD"` // @gotags: env:"SMTP_PASSWORD"
	From     string `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty" env:"SMTP_FROM"`         // @gotags: env:"SMTP_FROM"
}

func (x *SmtpConfig) Reset() {
	*x = SmtpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmtpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmtpConfig) ProtoMessage() {}

func (x *SmtpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmtpConfig.ProtoReflect.Descriptor instead.
func (*SmtpConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{21}
}

func (x *SmtpConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SmtpConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SmtpConfig) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *SmtpConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SmtpConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SmtpConfig) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type EmailConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Smtp *SmtpConfig `protobuf:"bytes,1,opt,name=smtp,proto3" json:"smtp,omitempty"`
}

func (x *EmailConfig) Reset() {
	*x = EmailConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailConfig) ProtoMessage() {}

func (x *EmailConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailConfig.ProtoReflect.Descriptor instead.
func (*EmailConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{22}
}

func (x *EmailConfig) GetSmtp() *SmtpConfig {
	if x != nil {
		return x.Smtp
	}
	return nil
}

type EmailServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   *GrpcServerConfig `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Registry *Registry         `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	Config   *EmailConfig      `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Kafka    *KafkaConfig      `protobuf:"bytes,4,opt,name=kafka,proto3" json:"kafka,omitempty"`
}

func (x *EmailServer) Reset() {
	*x = EmailServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailServer) ProtoMessage() {}

func (x *EmailServer) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailServer.ProtoReflect.Descriptor instead.
func (*EmailServer) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{23}
}

func (x *EmailServer) GetServer() *GrpcServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *EmailServer) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *EmailServer) GetConfig() *EmailConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *EmailServer) GetKafka() *KafkaConfig {
	if x != nil {
		return x.Kafka
	}
	return nil
}

type CaptchaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CaptchaConfig) Reset() {
	*x = CaptchaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptchaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptchaConfig) ProtoMessage() {}

func (x *CaptchaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptchaConfig.ProtoReflect.Descriptor instead.
func (*CaptchaConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{24}
}

type CaptchaServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   *GrpcServerConfig `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Registry *Registry         `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	Config   *CaptchaConfig    `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Kafka    *KafkaConfig      `protobuf:"bytes,4,opt,name=kafka,proto3" json:"kafka,omitempty"`
	Redis    *RedisConfig      `protobuf:"bytes,5,opt,name=redis,proto3" json:"redis,omitempty"`
}

func (x *CaptchaServer) Reset() {
	*x = CaptchaServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptchaServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptchaServer) ProtoMessage() {}

func (x *CaptchaServer) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptchaServer.ProtoReflect.Descriptor instead.
func (*CaptchaServer) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{25}
}

func (x *CaptchaServer) GetServer() *GrpcServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *CaptchaServer) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *CaptchaServer) GetConfig() *CaptchaConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CaptchaServer) GetKafka() *KafkaConfig {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *CaptchaServer) GetRedis() *RedisConfig {
	if x != nil {
		return x.Redis
	}
	return nil
}

type NotifyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotifyConfig) Reset() {
	*x = NotifyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyConfig) ProtoMessage() {}

func (x *NotifyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyConfig.ProtoReflect.Descriptor instead.
func (*NotifyConfig) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{26}
}

type NotifyServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   *GrpcServerConfig `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Registry *Registry         `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	Config   *NotifyConfig     `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Kafka    *KafkaConfig      `protobuf:"bytes,4,opt,name=kafka,proto3" json:"kafka,omitempty"`
}

func (x *NotifyServer) Reset() {
	*x = NotifyServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyServer) ProtoMessage() {}

func (x *NotifyServer) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyServer.ProtoReflect.Descriptor instead.
func (*NotifyServer) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{27}
}

func (x *NotifyServer) GetServer() *GrpcServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *NotifyServer) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *NotifyServer) GetConfig() *NotifyConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *NotifyServer) GetKafka() *KafkaConfig {
	if x != nil {
		return x.Kafka
	}
	return nil
}

type Registry_Etcd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string               `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty" env:"ETCD_ENDPOINT"` // @gotags: env:"ETCD_ENDPOINT"
	Username string               `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" env:"ETCD_USERNAME"` // @gotags: env:"ETCD_USERNAME"
	Password string               `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" env:"ETCD_PASSWORD"` // @gotags: env:"ETCD_PASSWORD"
	Timeout  *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty" env:"ETCD_TIMEOUT"`   // @gotags: env:"ETCD_TIMEOUT"
}

func (x *Registry_Etcd) Reset() {
	*x = Registry_Etcd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registry_Etcd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registry_Etcd) ProtoMessage() {}

func (x *Registry_Etcd) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registry_Etcd.ProtoReflect.Descriptor instead.
func (*Registry_Etcd) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Registry_Etcd) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Registry_Etcd) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Registry_Etcd) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Registry_Etcd) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type WebServerConfig_TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertFile string `protobuf:"bytes,1,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty" env:"WEB_CERT_FILE"` // @gotags: env:"WEB_CERT_FILE"
	KeyFile  string `protobuf:"bytes,2,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty" env:"WEB_KEY_FILE"`    // @gotags: env:"WEB_KEY_FILE"
	CaFile   string `protobuf:"bytes,3,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty" env:"WEB_CA_FILE"`       // @gotags: env:"WEB_CA_FILE"
}

func (x *WebServerConfig_TLS) Reset() {
	*x = WebServerConfig_TLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebServerConfig_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebServerConfig_TLS) ProtoMessage() {}

func (x *WebServerConfig_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebServerConfig_TLS.ProtoReflect.Descriptor instead.
func (*WebServerConfig_TLS) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{1, 0}
}

func (x *WebServerConfig_TLS) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *WebServerConfig_TLS) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *WebServerConfig_TLS) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

type GrpcServerConfig_TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertFile string `protobuf:"bytes,1,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty" env:"GRPC_CERT_FILE"` // @gotags: env:"GRPC_CERT_FILE"
	KeyFile  string `protobuf:"bytes,2,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty" env:"GRPC_KEY_FILE"`    // @gotags: env:"GRPC_KEY_FILE"
	CaFile   string `protobuf:"bytes,3,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty" env:"GRPC_CA_FILE"`       // @gotags: env:"GRPC_CA_FILE"
}

func (x *GrpcServerConfig_TLS) Reset() {
	*x = GrpcServerConfig_TLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcServerConfig_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcServerConfig_TLS) ProtoMessage() {}

func (x *GrpcServerConfig_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcServerConfig_TLS.ProtoReflect.Descriptor instead.
func (*GrpcServerConfig_TLS) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GrpcServerConfig_TLS) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *GrpcServerConfig_TLS) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *GrpcServerConfig_TLS) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

type TcpServer_TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertFile string `protobuf:"bytes,1,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty" env:"TCP_CERT_FILE"` // @gotags: env:"TCP_CERT_FILE"
	KeyFile  string `protobuf:"bytes,2,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty" env:"TCP_KEY_FILE"`    // @gotags: env:"TCP_KEY_FILE"
	CaFile   string `protobuf:"bytes,3,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty" env:"TCP_CA_FILE"`       // @gotags: env:"TCP_CA_FILE"
}

func (x *TcpServer_TLS) Reset() {
	*x = TcpServer_TLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpServer_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpServer_TLS) ProtoMessage() {}

func (x *TcpServer_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpServer_TLS.ProtoReflect.Descriptor instead.
func (*TcpServer_TLS) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TcpServer_TLS) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *TcpServer_TLS) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *TcpServer_TLS) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

type WebConfig_JWT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty" env:"WEB_JWT_SECRET"` // @gotags: env:"WEB_JWT_SECRET"
	Expire string `protobuf:"bytes,2,opt,name=expire,proto3" json:"expire,omitempty" env:"WEB_JWT_EXPIRE"` // @gotags: env:"WEB_JWT_EXPIRE"
}

func (x *WebConfig_JWT) Reset() {
	*x = WebConfig_JWT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conf_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebConfig_JWT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebConfig_JWT) ProtoMessage() {}

func (x *WebConfig_JWT) ProtoReflect() protoreflect.Message {
	mi := &file_conf_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebConfig_JWT.ProtoReflect.Descriptor instead.
func (*WebConfig_JWT) Descriptor() ([]byte, []int) {
	return file_conf_proto_rawDescGZIP(), []int{14, 0}
}

func (x *WebConfig_JWT) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *WebConfig_JWT) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

var File_conf_proto protoreflect.FileDescriptor

var file_conf_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x65, 0x74, 0x63, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x74, 0x63, 0x64, 0x52, 0x04,
	0x65, 0x74, 0x63, 0x64, 0x1a, 0x8f, 0x01, 0x0a, 0x04, 0x45, 0x74, 0x63, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x31,
	0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x56, 0x0a, 0x03, 0x54, 0x4c,
	0x53, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x46, 0x69,
	0x6c, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x10, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x32, 0x0a, 0x03, 0x74,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6a, 0x77, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6a, 0x77, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x56, 0x0a, 0x03,
	0x54, 0x4c, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x46, 0x69, 0x6c, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x09, 0x54, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03,
	0x74, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x1a, 0x56, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x57, 0x0a, 0x0b, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x69, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64, 0x62, 0x22, 0x59, 0x0a,
	0x0a, 0x4d, 0x54, 0x51, 0x51, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3d, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x6d,
	0x71, 0x74, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x54, 0x51, 0x51, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9d, 0x02, 0x0a, 0x10, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x70,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x73, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x73, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x22, 0x0c, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x91, 0x02, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2d, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x22,
	0x6f, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x03,
	0x6a, 0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4a, 0x57, 0x54, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x1a, 0x35, 0x0a, 0x03, 0x4a, 0x57, 0x54,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x22, 0xd0, 0x01, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x22, 0x0b, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x8f, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x22, 0x52, 0x0a, 0x0a, 0x45, 0x6d, 0x71, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x65, 0x6d, 0x71, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x6d, 0x71, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x65, 0x6d,
	0x71, 0x78, 0x22, 0x95, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x53,
	0x6d, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x39, 0x0a, 0x0b, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x6d, 0x74, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x6d, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04,
	0x73, 0x6d, 0x74, 0x70, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a,
	0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x22, 0x0f, 0x0a, 0x0d,
	0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x88, 0x02,
	0x0a, 0x0d, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x70,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd7, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x42, 0x1c, 0x5a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x3b, 0x63, 0x6f, 0x6e, 0x66,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_conf_proto_rawDescOnce sync.Once
	file_conf_proto_rawDescData = file_conf_proto_rawDesc
)

func file_conf_proto_rawDescGZIP() []byte {
	file_conf_proto_rawDescOnce.Do(func() {
		file_conf_proto_rawDescData = protoimpl.X.CompressGZIP(file_conf_proto_rawDescData)
	})
	return file_conf_proto_rawDescData
}

var file_conf_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_conf_proto_goTypes = []interface{}{
	(*Registry)(nil),             // 0: kratos.api.Registry
	(*WebServerConfig)(nil),      // 1: kratos.api.WebServerConfig
	(*GrpcServerConfig)(nil),     // 2: kratos.api.GrpcServerConfig
	(*TcpServer)(nil),            // 3: kratos.api.TcpServer
	(*KafkaConfig)(nil),          // 4: kratos.api.KafkaConfig
	(*RedisConfig)(nil),          // 5: kratos.api.RedisConfig
	(*MTQQConfig)(nil),           // 6: kratos.api.MTQQConfig
	(*CollectorConfig)(nil),      // 7: kratos.api.CollectorConfig
	(*CollectorServer)(nil),      // 8: kratos.api.CollectorServer
	(*CollectionConfig)(nil),     // 9: kratos.api.CollectionConfig
	(*CollectionServer)(nil),     // 10: kratos.api.CollectionServer
	(*DatabaseServerConfig)(nil), // 11: kratos.api.DatabaseServerConfig
	(*UserConfig)(nil),           // 12: kratos.api.UserConfig
	(*UserServer)(nil),           // 13: kratos.api.UserServer
	(*WebConfig)(nil),            // 14: kratos.api.WebConfig
	(*WebServer)(nil),            // 15: kratos.api.WebServer
	(*LogConfig)(nil),            // 16: kratos.api.LogConfig
	(*LogServer)(nil),            // 17: kratos.api.LogServer
	(*EmqxConfig)(nil),           // 18: kratos.api.EmqxConfig
	(*DeviceConfig)(nil),         // 19: kratos.api.DeviceConfig
	(*DeviceServer)(nil),         // 20: kratos.api.DeviceServer
	(*SmtpConfig)(nil),           // 21: kratos.api.SmtpConfig
	(*EmailConfig)(nil),          // 22: kratos.api.EmailConfig
	(*EmailServer)(nil),          // 23: kratos.api.EmailServer
	(*CaptchaConfig)(nil),        // 24: kratos.api.CaptchaConfig
	(*CaptchaServer)(nil),        // 25: kratos.api.CaptchaServer
	(*NotifyConfig)(nil),         // 26: kratos.api.NotifyConfig
	(*NotifyServer)(nil),         // 27: kratos.api.NotifyServer
	(*Registry_Etcd)(nil),        // 28: kratos.api.Registry.Etcd
	(*WebServerConfig_TLS)(nil),  // 29: kratos.api.WebServerConfig.TLS
	(*GrpcServerConfig_TLS)(nil), // 30: kratos.api.GrpcServerConfig.TLS
	(*TcpServer_TLS)(nil),        // 31: kratos.api.TcpServer.TLS
	(*WebConfig_JWT)(nil),        // 32: kratos.api.WebConfig.JWT
	(*durationpb.Duration)(nil),  // 33: google.protobuf.Duration
}
var file_conf_proto_depIdxs = []int32{
	28, // 0: kratos.api.Registry.etcd:type_name -> kratos.api.Registry.Etcd
	29, // 1: kratos.api.WebServerConfig.tls:type_name -> kratos.api.WebServerConfig.TLS
	30, // 2: kratos.api.GrpcServerConfig.tls:type_name -> kratos.api.GrpcServerConfig.TLS
	33, // 3: kratos.api.GrpcServerConfig.timeout:type_name -> google.protobuf.Duration
	31, // 4: kratos.api.TcpServer.tls:type_name -> kratos.api.TcpServer.TLS
	33, // 5: kratos.api.TcpServer.timeout:type_name -> google.protobuf.Duration
	6,  // 6: kratos.api.CollectorConfig.mqtt:type_name -> kratos.api.MTQQConfig
	2,  // 7: kratos.api.CollectorServer.server:type_name -> kratos.api.GrpcServerConfig
	0,  // 8: kratos.api.CollectorServer.registry:type_name -> kratos.api.Registry
	7,  // 9: kratos.api.CollectorServer.config:type_name -> kratos.api.CollectorConfig
	4,  // 10: kratos.api.CollectorServer.kafka:type_name -> kratos.api.KafkaConfig
	5,  // 11: kratos.api.CollectorServer.redis:type_name -> kratos.api.RedisConfig
	2,  // 12: kratos.api.CollectionServer.server:type_name -> kratos.api.GrpcServerConfig
	0,  // 13: kratos.api.CollectionServer.registry:type_name -> kratos.api.Registry
	11, // 14: kratos.api.CollectionServer.database:type_name -> kratos.api.DatabaseServerConfig
	9,  // 15: kratos.api.CollectionServer.config:type_name -> kratos.api.CollectionConfig
	4,  // 16: kratos.api.CollectionServer.kafka:type_name -> kratos.api.KafkaConfig
	2,  // 17: kratos.api.UserServer.server:type_name -> kratos.api.GrpcServerConfig
	0,  // 18: kratos.api.UserServer.registry:type_name -> kratos.api.Registry
	11, // 19: kratos.api.UserServer.database:type_name -> kratos.api.DatabaseServerConfig
	12, // 20: kratos.api.UserServer.config:type_name -> kratos.api.UserConfig
	5,  // 21: kratos.api.UserServer.redis:type_name -> kratos.api.RedisConfig
	32, // 22: kratos.api.WebConfig.jwt:type_name -> kratos.api.WebConfig.JWT
	1,  // 23: kratos.api.WebServer.server:type_name -> kratos.api.WebServerConfig
	0,  // 24: kratos.api.WebServer.registry:type_name -> kratos.api.Registry
	14, // 25: kratos.api.WebServer.config:type_name -> kratos.api.WebConfig
	5,  // 26: kratos.api.WebServer.redis:type_name -> kratos.api.RedisConfig
	2,  // 27: kratos.api.LogServer.server:type_name -> kratos.api.GrpcServerConfig
	0,  // 28: kratos.api.LogServer.registry:type_name -> kratos.api.Registry
	11, // 29: kratos.api.LogServer.database:type_name -> kratos.api.DatabaseServerConfig
	16, // 30: kratos.api.LogServer.config:type_name -> kratos.api.LogConfig
	4,  // 31: kratos.api.LogServer.kafka:type_name -> kratos.api.KafkaConfig
	18, // 32: kratos.api.DeviceConfig.emqx:type_name -> kratos.api.EmqxConfig
	2,  // 33: kratos.api.DeviceServer.server:type_name -> kratos.api.GrpcServerConfig
	0,  // 34: kratos.api.DeviceServer.registry:type_name -> kratos.api.Registry
	11, // 35: kratos.api.DeviceServer.database:type_name -> kratos.api.DatabaseServerConfig
	19, // 36: kratos.api.DeviceServer.config:type_name -> kratos.api.DeviceConfig
	5,  // 37: kratos.api.DeviceServer.redis:type_name -> kratos.api.RedisConfig
	21, // 38: kratos.api.EmailConfig.smtp:type_name -> kratos.api.SmtpConfig
	2,  // 39: kratos.api.EmailServer.server:type_name -> kratos.api.GrpcServerConfig
	0,  // 40: kratos.api.EmailServer.registry:type_name -> kratos.api.Registry
	22, // 41: kratos.api.EmailServer.config:type_name -> kratos.api.EmailConfig
	4,  // 42: kratos.api.EmailServer.kafka:type_name -> kratos.api.KafkaConfig
	2,  // 43: kratos.api.CaptchaServer.server:type_name -> kratos.api.GrpcServerConfig
	0,  // 44: kratos.api.CaptchaServer.registry:type_name -> kratos.api.Registry
	24, // 45: kratos.api.CaptchaServer.config:type_name -> kratos.api.CaptchaConfig
	4,  // 46: kratos.api.CaptchaServer.kafka:type_name -> kratos.api.KafkaConfig
	5,  // 47: kratos.api.CaptchaServer.redis:type_name -> kratos.api.RedisConfig
	2,  // 48: kratos.api.NotifyServer.server:type_name -> kratos.api.GrpcServerConfig
	0,  // 49: kratos.api.NotifyServer.registry:type_name -> kratos.api.Registry
	26, // 50: kratos.api.NotifyServer.config:type_name -> kratos.api.NotifyConfig
	4,  // 51: kratos.api.NotifyServer.kafka:type_name -> kratos.api.KafkaConfig
	33, // 52: kratos.api.Registry.Etcd.timeout:type_name -> google.protobuf.Duration
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_conf_proto_init() }
func file_conf_proto_init() {
	if File_conf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_conf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTQQConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmqxConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmtpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptchaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptchaServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registry_Etcd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebServerConfig_TLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcServerConfig_TLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpServer_TLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conf_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebConfig_JWT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conf_proto_goTypes,
		DependencyIndexes: file_conf_proto_depIdxs,
		MessageInfos:      file_conf_proto_msgTypes,
	}.Build()
	File_conf_proto = out.File
	file_conf_proto_rawDesc = nil
	file_conf_proto_goTypes = nil
	file_conf_proto_depIdxs = nil
}
