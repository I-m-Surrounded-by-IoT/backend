# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: ""
    version: 0.0.1
paths:
    /captcha/sendEmailCaptcha:
        post:
            tags:
                - Captcha
            operationId: Captcha_SendEmailCaptcha
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.captcha.SendEmailCaptchaReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.captcha.Empty'
    /captcha/verifyEmailCaptcha:
        post:
            tags:
                - Captcha
            operationId: Captcha_VerifyEmailCaptcha
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.captcha.VerifyEmailCaptchaReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.captcha.Empty'
    /collection/get_device_stream_event:
        post:
            tags:
                - Collection
            operationId: Collection_GetDeviceStreamEvent
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.collection.GetDeviceStreamEventReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.collection.GetDeviceStreamEventResp'
    /collection/get_device_stream_report:
        post:
            tags:
                - Collection
            operationId: Collection_GetDeviceStreamReport
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.collection.GetDeviceStreamReportReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.collection.CollectionData'
    /collection/record:
        get:
            tags:
                - Collection
            operationId: Collection_ListCollectionRecord
            parameters:
                - name: deviceId
                  in: query
                  schema:
                    type: string
                - name: page
                  in: query
                  schema:
                    type: string
                - name: size
                  in: query
                  schema:
                    type: string
                - name: before
                  in: query
                  schema:
                    type: string
                - name: after
                  in: query
                  schema:
                    type: string
                - name: order
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: sort
                  in: query
                  schema:
                    type: integer
                    format: enum
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.collection.ListCollectionRecordResp'
        post:
            tags:
                - Collection
            operationId: Collection_CreateCollectionRecord
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.collection.CollectionRecord'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.collection.Empty'
    /collector/report_immediately:
        post:
            tags:
                - Collector
            operationId: Collector_ReportImmediately
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.collector.ReportImmediatelyReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.collector.Empty'
    /collector/set_report_interval:
        post:
            tags:
                - Collector
            operationId: Collector_SetReportInterval
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.collector.SetReportIntervalReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.collector.SetReportIntervalResp'
    /device:
        get:
            tags:
                - Device
            operationId: Device_ListDevice
            parameters:
                - name: id
                  in: query
                  schema:
                    type: string
                - name: page
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: size
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: order
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: sort
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: fields
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: mac
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.ListDeviceResp'
        post:
            tags:
                - Device
            operationId: Device_RegisterDevice
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.device.RegisterDeviceReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.DeviceInfo'
    /device/deleted:
        get:
            tags:
                - Device
            operationId: Device_ListDeletedDeviceInfo
            parameters:
                - name: id
                  in: query
                  schema:
                    type: string
                - name: page
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: size
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: order
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: sort
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: fields
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: mac
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.ListDeviceResp'
    /device/mac/{mac}:
        get:
            tags:
                - Device
            operationId: Device_GetDeviceInfoByMac
            parameters:
                - name: mac
                  in: path
                  required: true
                  schema:
                    type: string
                - name: fields
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.DeviceInfo'
    /device/mac/{mac}/id:
        get:
            tags:
                - Device
            operationId: Device_GetDeviceID
            parameters:
                - name: mac
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.DeviceInfo'
    /device/{id}:
        get:
            tags:
                - Device
            operationId: Device_GetDeviceInfo
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                - name: fields
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.DeviceInfo'
    /device/{id}/delete:
        post:
            tags:
                - Device
            operationId: Device_DeleteDevice
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.device.DeleteDeviceReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.Empty'
    /device/{id}/last_report:
        get:
            tags:
                - Device
            operationId: Device_GetDeviceLastReport
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.DeviceLastReport'
    /device/{id}/last_seen:
        get:
            tags:
                - Device
            operationId: Device_GetDeviceLastSeen
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.DeviceLastSeen'
    /device/{id}/password:
        post:
            tags:
                - Device
            operationId: Device_SetDevicePassword
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.device.SetDevicePasswordReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.Empty'
    /device/{id}/undelete:
        post:
            tags:
                - Device
            operationId: Device_UnDeleteDevice
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.device.UnDeleteDeviceReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.Empty'
    /device/{id}/update_last_report:
        post:
            tags:
                - Device
            operationId: Device_UpdateDeviceLastReport
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.device.UpdateDeviceLastReportReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.Empty'
    /device/{id}/update_last_seen:
        post:
            tags:
                - Device
            operationId: Device_UpdateDeviceLastSeen
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.device.UpdateDeviceLastSeenReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.device.Empty'
    /email/send:
        post:
            tags:
                - Email
            operationId: Email_SendEmail
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.email.SendEmailReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.email.Empty'
    /log/device:
        get:
            tags:
                - Log
            operationId: Log_ListDeviceLog
            parameters:
                - name: deviceId
                  in: query
                  schema:
                    type: string
                - name: page
                  in: query
                  schema:
                    type: string
                - name: size
                  in: query
                  schema:
                    type: string
                - name: before
                  in: query
                  schema:
                    type: string
                - name: after
                  in: query
                  schema:
                    type: string
                - name: levelFilter
                  in: query
                  schema:
                    type: string
                - name: order
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: sort
                  in: query
                  schema:
                    type: integer
                    format: enum
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.log.ListDeviceLogResp'
        post:
            tags:
                - Log
            operationId: Log_CreateDeviceLog
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.log.DeviceLog'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.log.Empty'
    /user:
        get:
            tags:
                - User
            operationId: User_ListUser
            parameters:
                - name: page
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: size
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: order
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: sort
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: fields
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: id
                  in: query
                  schema:
                    type: string
                - name: username
                  in: query
                  schema:
                    type: string
                - name: role
                  in: query
                  schema:
                    type: string
                - name: status
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.ListUserResp'
        post:
            tags:
                - User
            operationId: User_CreateUser
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.CreateUserReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.UserInfo'
    /user/email:
        post:
            tags:
                - User
            operationId: User_BindEmail
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.BindEmailReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.Empty'
    /user/email/unbind:
        post:
            tags:
                - User
            operationId: User_UnbindEmail
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.UnbindEmailReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.Empty'
    /user/follow/device:
        post:
            tags:
                - User
            operationId: User_FollowDevice
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.FollowDeviceReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.Empty'
    /user/follow/device/all:
        post:
            tags:
                - User
            operationId: User_FollowAllDevice
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.FollowAllDeviceReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.Empty'
    /user/follow/device/{userId}:
        get:
            tags:
                - User
            operationId: User_ListFollowedDeviceIDs
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.ListFollowedDeviceIDsResp'
    /user/follow/device/{userId}/{deviceId}:
        get:
            tags:
                - User
            operationId: User_HasFollowedDevice
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                    type: string
                - name: deviceId
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.HasFollowedDeviceResp'
    /user/follow/user/email/{deviceId}:
        get:
            tags:
                - User
            operationId: User_ListFollowedUserEmailsByDevice
            parameters:
                - name: deviceId
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.ListFollowedUserEmailsByDeviceResp'
    /user/follow/user/{deviceId}:
        get:
            tags:
                - User
            operationId: User_ListFollowedUserIDsByDevice
            parameters:
                - name: deviceId
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.ListFollowedUserIDsByDeviceResp'
    /user/last-seen:
        put:
            tags:
                - User
            operationId: User_UpdateUserLastSeen
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.UpdateUserLastSeenReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.Empty'
    /user/last-seen/{id}:
        get:
            tags:
                - User
            operationId: User_GetUserLastSeen
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.UserLastSeen'
    /user/password:
        put:
            tags:
                - User
            operationId: User_SetUserPassword
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.SetUserPasswordReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.Empty'
    /user/password/version/{id}:
        get:
            tags:
                - User
            operationId: User_GetUserPasswordVersion
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.GetUserPasswordVersionResp'
    /user/role:
        put:
            tags:
                - User
            operationId: User_SetUserRole
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.SetUserRoleReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.Empty'
    /user/status:
        put:
            tags:
                - User
            operationId: User_SetUserStatus
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.SetUserStatusReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.Empty'
    /user/unfollow/device:
        post:
            tags:
                - User
            operationId: User_UnfollowDevice
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.UnfollowDeviceReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.Empty'
    /user/unfollow/device/all:
        post:
            tags:
                - User
            operationId: User_UnfollowAllDevice
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.UnfollowAllDeviceReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.Empty'
    /user/username:
        put:
            tags:
                - User
            operationId: User_SetUsername
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.SetUsernameReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.SetUsernameResp'
    /user/username/{username}:
        get:
            tags:
                - User
            operationId: User_GetUserInfoByUsername
            parameters:
                - name: username
                  in: path
                  required: true
                  schema:
                    type: string
                - name: fields
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.UserInfo'
    /user/username/{username}/id:
        get:
            tags:
                - User
            operationId: User_GetUserId
            parameters:
                - name: username
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.GetUserIdResp'
    /user/validate:
        post:
            tags:
                - User
            operationId: User_ValidateUserPassword
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/api.user.ValidateUserPasswordReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.ValidateUserPasswordResp'
    /user/{id}:
        get:
            tags:
                - User
            operationId: User_GetUserInfo
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                - name: fields
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/api.user.UserInfo'
components:
    schemas:
        api.captcha.Empty:
            type: object
            properties: {}
        api.captcha.SendEmailCaptchaReq:
            type: object
            properties:
                async:
                    type: boolean
                userId:
                    type: string
                email:
                    type: string
        api.captcha.VerifyEmailCaptchaReq:
            type: object
            properties:
                userId:
                    type: string
                email:
                    type: string
                captcha:
                    type: string
        api.collection.CollectionData:
            type: object
            properties:
                timestamp:
                    type: string
                geoPoint:
                    $ref: '#/components/schemas/api.collection.GeoPoint'
                temperature:
                    type: number
                    format: float
        api.collection.CollectionRecord:
            type: object
            properties:
                id:
                    type: string
                deviceId:
                    type: string
                createdAt:
                    type: string
                data:
                    $ref: '#/components/schemas/api.collection.CollectionData'
        api.collection.Empty:
            type: object
            properties: {}
        api.collection.GeoPoint:
            type: object
            properties:
                lat:
                    type: number
                    format: double
                lon:
                    type: number
                    format: double
        api.collection.GetDeviceStreamEventReq:
            type: object
            properties:
                id:
                    type: string
                eventFilter:
                    type: string
        api.collection.GetDeviceStreamEventResp:
            type: object
            properties:
                topic:
                    type: string
                message:
                    type: string
                timestamp:
                    type: string
        api.collection.GetDeviceStreamReportReq:
            type: object
            properties:
                id:
                    type: string
        api.collection.ListCollectionRecordResp:
            type: object
            properties:
                records:
                    type: array
                    items:
                        $ref: '#/components/schemas/api.collection.CollectionRecord'
                total:
                    type: string
        api.collector.Empty:
            type: object
            properties: {}
        api.collector.ReportImmediatelyReq:
            type: object
            properties:
                id:
                    type: string
        api.collector.SetReportIntervalReq:
            type: object
            properties:
                id:
                    type: string
                interval:
                    type: string
        api.collector.SetReportIntervalResp:
            type: object
            properties: {}
        api.device.DeleteDeviceReq:
            type: object
            properties:
                id:
                    type: string
        api.device.DeviceInfo:
            type: object
            properties:
                id:
                    type: string
                createdAt:
                    type: string
                updatedAt:
                    type: string
                mac:
                    type: string
                comment:
                    type: string
        api.device.DeviceLastReport:
            type: object
            properties:
                lastReportAt:
                    type: string
                timestamp:
                    type: string
                lat:
                    type: number
                    format: double
                lon:
                    type: number
                    format: double
                temperature:
                    type: number
                    format: float
        api.device.DeviceLastSeen:
            type: object
            properties:
                lastSeenAt:
                    type: string
                lastSeenIp:
                    type: string
        api.device.Empty:
            type: object
            properties: {}
        api.device.ListDeviceResp:
            type: object
            properties:
                devices:
                    type: array
                    items:
                        $ref: '#/components/schemas/api.device.DeviceInfo'
                total:
                    type: integer
                    format: int32
        api.device.RegisterDeviceReq:
            type: object
            properties:
                mac:
                    type: string
                password:
                    type: string
        api.device.SetDevicePasswordReq:
            type: object
            properties:
                id:
                    type: string
                password:
                    type: string
        api.device.UnDeleteDeviceReq:
            type: object
            properties:
                id:
                    type: string
        api.device.UpdateDeviceLastReportReq:
            type: object
            properties:
                id:
                    type: string
                lastReport:
                    $ref: '#/components/schemas/api.device.DeviceLastReport'
        api.device.UpdateDeviceLastSeenReq:
            type: object
            properties:
                id:
                    type: string
                lastSeen:
                    $ref: '#/components/schemas/api.device.DeviceLastSeen'
        api.email.Empty:
            type: object
            properties: {}
        api.email.SendEmailReq:
            type: object
            properties:
                to:
                    type: array
                    items:
                        type: string
                subject:
                    type: string
                body:
                    type: string
        api.log.DeviceLog:
            type: object
            properties:
                id:
                    type: string
                data:
                    $ref: '#/components/schemas/api.log.DeviceLogData'
        api.log.DeviceLogData:
            type: object
            properties:
                deviceId:
                    type: string
                topic:
                    type: string
                message:
                    type: string
                level:
                    type: integer
                    format: uint32
                timestamp:
                    type: string
        api.log.Empty:
            type: object
            properties: {}
        api.log.ListDeviceLogResp:
            type: object
            properties:
                logs:
                    type: array
                    items:
                        $ref: '#/components/schemas/api.log.DeviceLog'
                total:
                    type: string
        api.user.BindEmailReq:
            type: object
            properties:
                id:
                    type: string
                email:
                    type: string
        api.user.CreateUserReq:
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string
                role:
                    type: integer
                    format: enum
                status:
                    type: integer
                    format: enum
        api.user.Empty:
            type: object
            properties: {}
        api.user.FollowAllDeviceReq:
            type: object
            properties:
                userId:
                    type: string
        api.user.FollowDeviceReq:
            type: object
            properties:
                userId:
                    type: string
                deviceId:
                    type: string
        api.user.GetUserIdResp:
            type: object
            properties:
                id:
                    type: string
        api.user.GetUserPasswordVersionResp:
            type: object
            properties:
                version:
                    type: integer
                    format: uint32
        api.user.HasFollowedDeviceResp:
            type: object
            properties:
                followed:
                    type: boolean
        api.user.ListFollowedDeviceIDsResp:
            type: object
            properties:
                deviceIds:
                    type: array
                    items:
                        type: string
        api.user.ListFollowedUserEmailsByDeviceResp:
            type: object
            properties:
                userEmails:
                    type: array
                    items:
                        type: string
        api.user.ListFollowedUserIDsByDeviceResp:
            type: object
            properties:
                userIds:
                    type: array
                    items:
                        type: string
        api.user.ListUserResp:
            type: object
            properties:
                users:
                    type: array
                    items:
                        $ref: '#/components/schemas/api.user.UserInfo'
                total:
                    type: integer
                    format: int32
        api.user.SetUserPasswordReq:
            type: object
            properties:
                id:
                    type: string
                password:
                    type: string
        api.user.SetUserRoleReq:
            type: object
            properties:
                id:
                    type: string
                role:
                    type: integer
                    format: enum
        api.user.SetUserStatusReq:
            type: object
            properties:
                id:
                    type: string
                status:
                    type: integer
                    format: enum
        api.user.SetUsernameReq:
            type: object
            properties:
                id:
                    type: string
                username:
                    type: string
        api.user.SetUsernameResp:
            type: object
            properties:
                oldUsername:
                    type: string
        api.user.UnbindEmailReq:
            type: object
            properties:
                id:
                    type: string
        api.user.UnfollowAllDeviceReq:
            type: object
            properties:
                userId:
                    type: string
        api.user.UnfollowDeviceReq:
            type: object
            properties:
                userId:
                    type: string
                deviceId:
                    type: string
        api.user.UpdateUserLastSeenReq:
            type: object
            properties:
                id:
                    type: string
                lastSeen:
                    $ref: '#/components/schemas/api.user.UserLastSeen'
        api.user.UserInfo:
            type: object
            properties:
                id:
                    type: string
                createdAt:
                    type: string
                updatedAt:
                    type: string
                username:
                    type: string
                role:
                    type: integer
                    format: enum
                status:
                    type: integer
                    format: enum
        api.user.UserLastSeen:
            type: object
            properties:
                lastSeenAt:
                    type: string
                lastSeenIp:
                    type: string
        api.user.ValidateUserPasswordReq:
            type: object
            properties:
                id:
                    type: string
                password:
                    type: string
        api.user.ValidateUserPasswordResp:
            type: object
            properties:
                valid:
                    type: boolean
tags:
    - name: Captcha
    - name: Collection
    - name: Collector
    - name: Device
    - name: Email
    - name: Log
    - name: User
