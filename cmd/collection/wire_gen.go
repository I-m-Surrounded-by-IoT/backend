// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package collection

import (
	"github.com/I-m-Surrounded-by-IoT/backend/conf"
	"github.com/I-m-Surrounded-by-IoT/backend/internal/registry"
	collection2 "github.com/I-m-Surrounded-by-IoT/backend/internal/server/collection"
	"github.com/I-m-Surrounded-by-IoT/backend/service/collection"
	"github.com/I-m-Surrounded-by-IoT/backend/utils"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(grpcServerConfig *conf.GrpcServerConfig, confRegistry *conf.Registry, databaseServerConfig *conf.DatabaseServerConfig, kafkaConfig *conf.KafkaConfig, collectionConfig *conf.CollectionConfig, logger log.Logger) (*kratos.App, func(), error) {
	client := utils.ForceNewKafkaClient(kafkaConfig)
	collectionService := collection.NewCollectionDatabase(databaseServerConfig, collectionConfig, client)
	grpcGatewayServer := collection2.NewCollectionDatabase(grpcServerConfig, collectionService)
	collectionConsumer := collection.NewCollectionConsumer(collectionService)
	collectionConsumerServer := collection2.NewCollectionConsumerServer(client, collectionConsumer)
	registrar := registry.NewRegistry(confRegistry)
	app := newApp(logger, grpcGatewayServer, collectionConsumerServer, registrar)
	return app, func() {
	}, nil
}
