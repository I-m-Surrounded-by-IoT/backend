// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package email

import (
	"github.com/I-m-Surrounded-by-IoT/backend/conf"
	"github.com/I-m-Surrounded-by-IoT/backend/internal/registry"
	email2 "github.com/I-m-Surrounded-by-IoT/backend/internal/server/email"
	"github.com/I-m-Surrounded-by-IoT/backend/service/email"
	"github.com/I-m-Surrounded-by-IoT/backend/utils"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(grpcServerConfig *conf.GrpcServerConfig, confRegistry *conf.Registry, emailConfig *conf.EmailConfig, kafkaConfig *conf.KafkaConfig, logger log.Logger) (*kratos.App, func(), error) {
	emailService := email.NewEmailService(emailConfig)
	grpcGatewayServer := email2.NewEmailServer(grpcServerConfig, emailService)
	client := utils.ForceNewKafkaClient(kafkaConfig)
	emailConsumer := email.NewEmailConsumer(emailService)
	emailMQServer := email2.NewEmailMQServerServer(client, emailConsumer)
	registrar := registry.NewRegistry(confRegistry)
	app := newApp(logger, grpcGatewayServer, emailMQServer, registrar)
	return app, func() {
	}, nil
}
