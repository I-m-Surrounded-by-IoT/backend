// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package log

import (
	"github.com/I-m-Surrounded-by-IoT/backend/conf"
	"github.com/I-m-Surrounded-by-IoT/backend/internal/registry"
	log3 "github.com/I-m-Surrounded-by-IoT/backend/internal/server/log"
	log2 "github.com/I-m-Surrounded-by-IoT/backend/service/log"
	"github.com/I-m-Surrounded-by-IoT/backend/utils"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(grpcServerConfig *conf.GrpcServerConfig, confRegistry *conf.Registry, databaseServerConfig *conf.DatabaseServerConfig, kafkaConfig *conf.KafkaConfig, logConfig *conf.LogConfig, logger log.Logger) (*kratos.App, func(), error) {
	logService := log2.NewLogService(databaseServerConfig, logConfig)
	grpcGatewayServer := log3.NewLogServer(grpcServerConfig, logService)
	client := utils.ForceNewKafkaClient(kafkaConfig)
	consumerGroup := log3.NewConsumerGroup(client)
	deviceLogConsumer := log2.NewDeviceLogConsumer(logService)
	deviceLogServer := log3.NewDeviceLogServer(consumerGroup, deviceLogConsumer)
	registrar := registry.NewRegistry(confRegistry)
	app := newApp(logger, grpcGatewayServer, deviceLogServer, registrar)
	return app, func() {
	}, nil
}
